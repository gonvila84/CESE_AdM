
adm_c16_mod.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003318  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  080034c4  080034c4  000134c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003560  08003560  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003560  08003560  00013560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003568  08003568  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003568  08003568  00013568  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800356c  0800356c  0001356c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003570  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000007a0  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200007ac  200007ac  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_line   0000ce43  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   0000ecbd  00000000  00000000  0002ce7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001c24  00000000  00000000  0003bb3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000b38  00000000  00000000  0003d760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000d9e5b  00000000  00000000  0003e298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 00000a80  00000000  00000000  001180f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00023b43  00000000  00000000  00118b78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013c6bb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002f08  00000000  00000000  0013c70c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080034ac 	.word	0x080034ac

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	080034ac 	.word	0x080034ac

080001ec <asm_svc>:
@ Prototipo en "C":
@   void asm_svc (void)
@
.thumb_func
    asm_svc:
        svc 0
 80001ec:	df00      	svc	0
        bx lr
 80001ee:	4770      	bx	lr

080001f0 <asm_sum>:
@ Valor de retorno:
@   r0: resultado de la suma de firstOperand y secondOperand
@
.thumb_func
    asm_sum:
        add r0, r1  @ r0 = r0 + r1
 80001f0:	4408      	add	r0, r1
        bx lr       @ vuelve adonde fue llamada (especificamente, si "pc"
 80001f2:	4770      	bx	lr

080001f4 <asm_zeros>:
@   r1: longitud del vector
@
@
.thumb_func
    asm_zeros:
        mov		r2, 0
 80001f4:	f04f 0200 	mov.w	r2, #0

080001f8 <.asm_zeros_for>:
    .asm_zeros_for:
        str		r2, [r0], 4
 80001f8:	f840 2b04 	str.w	r2, [r0], #4
        subs	r1, 1
 80001fc:	3901      	subs	r1, #1
        bne		.asm_zeros_for
 80001fe:	d1fb      	bne.n	80001f8 <.asm_zeros_for>
        bx lr
 8000200:	4770      	bx	lr

08000202 <asm_productoEscalar32>:
@	r3: escalar


.thumb_func
    asm_productoEscalar32:
    	ldr		r4, [r0]
 8000202:	6804      	ldr	r4, [r0, #0]

08000204 <.asm_productoEscalar32_for>:
    .asm_productoEscalar32_for:
		mul		r4, r4, r3
 8000204:	fb04 f403 	mul.w	r4, r4, r3
		str		r4,	[r1], 4
 8000208:	f841 4b04 	str.w	r4, [r1], #4
		ldr		r4, [r0,4]!
 800020c:	f850 4f04 	ldr.w	r4, [r0, #4]!
        subs	r2, 1
 8000210:	3a01      	subs	r2, #1
        bne		.asm_productoEscalar32_for
 8000212:	d1f7      	bne.n	8000204 <.asm_productoEscalar32_for>
        bx lr
 8000214:	4770      	bx	lr

08000216 <asm_productoEscalar16>:

.thumb_func
    asm_productoEscalar16:
    	ldrh	r4, [r0]
 8000216:	8804      	ldrh	r4, [r0, #0]

08000218 <.asm_productoEscalar16_for>:
    .asm_productoEscalar16_for:
		mul		r4, r4, r3
 8000218:	fb04 f403 	mul.w	r4, r4, r3
		strh	r4,	[r1], 2
 800021c:	f821 4b02 	strh.w	r4, [r1], #2
		ldrh	r4, [r0,2]!
 8000220:	f830 4f02 	ldrh.w	r4, [r0, #2]!
        subs	r2, 1
 8000224:	3a01      	subs	r2, #1
        bne		.asm_productoEscalar16_for
 8000226:	d1f7      	bne.n	8000218 <.asm_productoEscalar16_for>
        bx lr
 8000228:	4770      	bx	lr

0800022a <asm_productoEscalar12>:

.thumb_func
    asm_productoEscalar12:
    	push 	{r4}
 800022a:	b410      	push	{r4}
    	ldrh	r4, [r0]
 800022c:	8804      	ldrh	r4, [r0, #0]

0800022e <.asm_productoEscalar12_for>:
    .asm_productoEscalar12_for:
		mul		r4, r4, r3
 800022e:	fb04 f403 	mul.w	r4, r4, r3
		mov		r5, #0x0FFF
 8000232:	f640 75ff 	movw	r5, #4095	; 0xfff
		and 	r4, r5
 8000236:	ea04 0405 	and.w	r4, r4, r5
		strh	r4,	[r1], 2
 800023a:	f821 4b02 	strh.w	r4, [r1], #2
		ldrh	r4, [r0,2]!
 800023e:	f830 4f02 	ldrh.w	r4, [r0, #2]!
        subs	r2, 1
 8000242:	3a01      	subs	r2, #1
        bne		.asm_productoEscalar12_for
 8000244:	d1f3      	bne.n	800022e <.asm_productoEscalar12_for>
        pop		{r4}
 8000246:	bc10      	pop	{r4}
        bx lr
 8000248:	4770      	bx	lr

0800024a <asm_max>:
@   r0: puntero al vector de entrada
@   r1: longitud

.thumb_func
	asm_max:
		push	{r4}
 800024a:	b410      	push	{r4}
		mov		r4, r1
 800024c:	460c      	mov	r4, r1

0800024e <.asm_maximoDelVector_loop>:
	.asm_maximoDelVector_loop:
		ldr 	r2,[r0],#4
 800024e:	f850 2b04 	ldr.w	r2, [r0], #4

		cmp		r4, r1
 8000252:	428c      	cmp	r4, r1
		IT		EQ
 8000254:	bf08      	it	eq
		moveq	r3, r2
 8000256:	4613      	moveq	r3, r2

		cmp		r3, r2
 8000258:	4293      	cmp	r3, r2
		IT		LT
 800025a:	bfb8      	it	lt
		movlt	r3, r2
 800025c:	4613      	movlt	r3, r2

		subs	r1,1						@	Descuento al valor de la longitud para decrementar el loop y actualizo flags
 800025e:	3901      	subs	r1, #1
		bne		.asm_maximoDelVector_loop	@	Si la resta anterior no da 0 me dirjo a una nueva iteracion
 8000260:	d1f5      	bne.n	800024e <.asm_maximoDelVector_loop>
		pop		{r4}
 8000262:	bc10      	pop	{r4}
		push	{r0}
 8000264:	b401      	push	{r0}
		mov		r0, r3
 8000266:	4618      	mov	r0, r3
		bx 		lr							@	Salgo de la funcion enviando el valor de retorno
 8000268:	4770      	bx	lr

0800026a <asm_downsampleM>:
@ r5: Almacenamiento del valor actual de r0
@ r6: Almacenamiento del valor actual de r1
@ r7: Copia del vector de salida
.thumb_func
	asm_downsampleM:
		push	{r4,r5,r6,r7}
 800026a:	b4f0      	push	{r4, r5, r6, r7}
		mov		r7,#0
 800026c:	f04f 0700 	mov.w	r7, #0
		mov		r4,#1						@ Inicio un contador de muestras
 8000270:	f04f 0401 	mov.w	r4, #1

08000274 <.asm_downsampleM_loop>:

	.asm_downsampleM_loop:
		subs	r2,1						@ Decremento el contador de iteraciones
 8000274:	3a01      	subs	r2, #1
		blt		.asm_downsample_end
 8000276:	db0b      	blt.n	8000290 <.asm_downsample_end>

		ldr 	r5,[r0],#4					@ Cargo el valor del vector de entrada y me dezplazo
 8000278:	f850 5b04 	ldr.w	r5, [r0], #4

		cmp		r4,r3						@ Resto al valor del contador la cantidad provista como parametro (n de cada M muestras a descartar)
 800027c:	429c      	cmp	r4, r3
		ITT		EQ
 800027e:	bf04      	itt	eq
		moveq	r4,#1						@ Reseteo el contador de muestras
 8000280:	2401      	moveq	r4, #1
		streq	r7,	[r1]
 8000282:	600f      	streq	r7, [r1, #0]
		beq		.asm_downsampleM_loop		@ Salto condicional al comienzo del loop porque llegue a las muestras a descartar definidas
 8000284:	d0f6      	beq.n	8000274 <.asm_downsampleM_loop>

		add		r4,1						@ Incremento el contador de muestras
 8000286:	f104 0401 	add.w	r4, r4, #1
		str		r5,	[r1],4					@ Actualizo el valor en el vector de salida
 800028a:	f841 5b04 	str.w	r5, [r1], #4
		b		.asm_downsampleM_loop		@ Salto condicional al comienzo del loop si no llegue a recorrer todas las muestras
 800028e:	e7f1      	b.n	8000274 <.asm_downsampleM_loop>

08000290 <.asm_downsample_end>:
	.asm_downsample_end:
		pop		{r4,r5,r6,r7}
 8000290:	bcf0      	pop	{r4, r5, r6, r7}
		bx		lr
 8000292:	4770      	bx	lr

08000294 <asm_invertir>:
//R6 = i
//R4 = N
//R5 = Direccion base de Vin
.thumb_func
	asm_invertir:
		push	{r4,r5,r6,r7}
 8000294:	b4f0      	push	{r4, r5, r6, r7}
		mov 	r2,r0	//Me guardo la direccion base
 8000296:	4602      	mov	r2, r0
		mov		r7,#2
 8000298:	f04f 0702 	mov.w	r7, #2
		sub 	r1,1	//Decremento la longitud para hacerla coincidir con V[i] = Long-1 como ultima posicion
 800029c:	f1a1 0101 	sub.w	r1, r1, #1
		mul 	r1,r7	//Multiplico por 4 bytes, eso me da la distancia en bytes con r0
 80002a0:	fb07 f101 	mul.w	r1, r7, r1
		add 	r3,r1	//Almaceno la ultima dir de memoria V
 80002a4:	440b      	add	r3, r1
		mov 	r1,0	//Reutilizo r1 para cumplir la funcion de variable i del for
 80002a6:	f04f 0100 	mov.w	r1, #0

080002aa <.asm_invertir_loop>:
		.asm_invertir_loop:
			subs	r6, r3, r2
 80002aa:	1a9e      	subs	r6, r3, r2
			beq		.asm_invertir_loop_end
 80002ac:	d00c      	beq.n	80002c8 <.asm_invertir_loop_end>
			cmp		r6, 2
 80002ae:	2e02      	cmp	r6, #2
			beq		.asm_invertir_loop_end
 80002b0:	d00a      	beq.n	80002c8 <.asm_invertir_loop_end>
			ldrh	r4, [r2]
 80002b2:	8814      	ldrh	r4, [r2, #0]
			ldrh	r5, [r3]
 80002b4:	881d      	ldrh	r5, [r3, #0]
			strh	r4, [r3]
 80002b6:	801c      	strh	r4, [r3, #0]
			strh	r5,	[r2]
 80002b8:	8015      	strh	r5, [r2, #0]
			add		r1, 1
 80002ba:	f101 0101 	add.w	r1, r1, #1
			add		r2, 2
 80002be:	f102 0202 	add.w	r2, r2, #2
			sub		r3, 2
 80002c2:	f1a3 0302 	sub.w	r3, r3, #2
			b		.asm_invertir_loop
 80002c6:	e7f0      	b.n	80002aa <.asm_invertir_loop>

080002c8 <.asm_invertir_loop_end>:
			.asm_invertir_loop_end:
			pop			{r4,r5,r6,r7}
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
			bx			lr
 80002ca:	4770      	bx	lr

080002cc <asm_filtroVentana10>:
//R1 - Vout
//R2 - longitud

.thumb_func
	asm_filtroVentana10:
	push	{r4,r5,r6,r7,r8}
 80002cc:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
	sub		r2, 1
 80002d0:	f1a2 0201 	sub.w	r2, r2, #1
	mov		r3, r0
 80002d4:	4603      	mov	r3, r0
	mov		r4, 3
 80002d6:	f04f 0403 	mov.w	r4, #3

080002da <.asm_f10_loop>:
	.asm_f10_loop:
	mov		r6, r3
 80002da:	461e      	mov	r6, r3
	mov		r8, 0
 80002dc:	f04f 0800 	mov.w	r8, #0

080002e0 <.asm_f10_avg_loop>:
		.asm_f10_avg_loop:
			mov		r5, 2
 80002e0:	f04f 0502 	mov.w	r5, #2
			mul		r5, r2,	r5
 80002e4:	fb02 f505 	mul.w	r5, r2, r5
			add		r5, r0, r5
 80002e8:	4405      	add	r5, r0

			ldrh	r7,[r3]
 80002ea:	881f      	ldrh	r7, [r3, #0]
			add		r8,r7
 80002ec:	44b8      	add	r8, r7

			subs	r5, r3	//Se fija si llego a la ultima direccion
 80002ee:	1aed      	subs	r5, r5, r3
			bne	.withoutReturn
 80002f0:	d103      	bne.n	80002fa <.withoutReturn>

			cmp		r4, 1	//Se fija si esta recolectando la ultima muestra
 80002f2:	2c01      	cmp	r4, #1
			IT		NE
 80002f4:	bf18      	it	ne
			movne	r3, r0
 80002f6:	4603      	movne	r3, r0
			b		.toSamplesDecrement
 80002f8:	e002      	b.n	8000300 <.toSamplesDecrement>

080002fa <.withoutReturn>:

			.withoutReturn:

			cmp		r4, 1	//Se fija si esta recolectando la ultima muestra
 80002fa:	2c01      	cmp	r4, #1
			IT		NE
 80002fc:	bf18      	it	ne
			addne	r3, 2
 80002fe:	3302      	addne	r3, #2

08000300 <.toSamplesDecrement>:

			.toSamplesDecrement:
			subs	r4, 1
 8000300:	3c01      	subs	r4, #1
		bne		.asm_f10_avg_loop
 8000302:	d1ed      	bne.n	80002e0 <.asm_f10_avg_loop>
	mov		r4, 3
 8000304:	f04f 0403 	mov.w	r4, #3
	udiv	r8,r8,r4
 8000308:	fbb8 f8f4 	udiv	r8, r8, r4
	strh	r8,[r1],2
 800030c:	f821 8b02 	strh.w	r8, [r1], #2
	mov		r3, r6
 8000310:	4633      	mov	r3, r6
	mov		r5, 2
 8000312:	f04f 0502 	mov.w	r5, #2
	mul		r5, r2,	r5
 8000316:	fb02 f505 	mul.w	r5, r2, r5
	add		r5, r0, r5
 800031a:	4405      	add	r5, r0
	subs	r5,r3
 800031c:	1aed      	subs	r5, r5, r3
	IT		GT
 800031e:	bfc8      	it	gt
	addgt	R3, 2
 8000320:	3302      	addgt	r3, #2
bne		.asm_f10_loop
 8000322:	d1da      	bne.n	80002da <.asm_f10_loop>
pop		{r4,r5,r6,r7,r8}
 8000324:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
bx		lr
 8000328:	4770      	bx	lr
	...

0800032c <__aeabi_uldivmod>:
 800032c:	b953      	cbnz	r3, 8000344 <__aeabi_uldivmod+0x18>
 800032e:	b94a      	cbnz	r2, 8000344 <__aeabi_uldivmod+0x18>
 8000330:	2900      	cmp	r1, #0
 8000332:	bf08      	it	eq
 8000334:	2800      	cmpeq	r0, #0
 8000336:	bf1c      	itt	ne
 8000338:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800033c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000340:	f000 b974 	b.w	800062c <__aeabi_idiv0>
 8000344:	f1ad 0c08 	sub.w	ip, sp, #8
 8000348:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800034c:	f000 f806 	bl	800035c <__udivmoddi4>
 8000350:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000354:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000358:	b004      	add	sp, #16
 800035a:	4770      	bx	lr

0800035c <__udivmoddi4>:
 800035c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000360:	9d08      	ldr	r5, [sp, #32]
 8000362:	4604      	mov	r4, r0
 8000364:	468e      	mov	lr, r1
 8000366:	2b00      	cmp	r3, #0
 8000368:	d14d      	bne.n	8000406 <__udivmoddi4+0xaa>
 800036a:	428a      	cmp	r2, r1
 800036c:	4694      	mov	ip, r2
 800036e:	d969      	bls.n	8000444 <__udivmoddi4+0xe8>
 8000370:	fab2 f282 	clz	r2, r2
 8000374:	b152      	cbz	r2, 800038c <__udivmoddi4+0x30>
 8000376:	fa01 f302 	lsl.w	r3, r1, r2
 800037a:	f1c2 0120 	rsb	r1, r2, #32
 800037e:	fa20 f101 	lsr.w	r1, r0, r1
 8000382:	fa0c fc02 	lsl.w	ip, ip, r2
 8000386:	ea41 0e03 	orr.w	lr, r1, r3
 800038a:	4094      	lsls	r4, r2
 800038c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000390:	0c21      	lsrs	r1, r4, #16
 8000392:	fbbe f6f8 	udiv	r6, lr, r8
 8000396:	fa1f f78c 	uxth.w	r7, ip
 800039a:	fb08 e316 	mls	r3, r8, r6, lr
 800039e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003a2:	fb06 f107 	mul.w	r1, r6, r7
 80003a6:	4299      	cmp	r1, r3
 80003a8:	d90a      	bls.n	80003c0 <__udivmoddi4+0x64>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80003b2:	f080 811f 	bcs.w	80005f4 <__udivmoddi4+0x298>
 80003b6:	4299      	cmp	r1, r3
 80003b8:	f240 811c 	bls.w	80005f4 <__udivmoddi4+0x298>
 80003bc:	3e02      	subs	r6, #2
 80003be:	4463      	add	r3, ip
 80003c0:	1a5b      	subs	r3, r3, r1
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c8:	fb08 3310 	mls	r3, r8, r0, r3
 80003cc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003d0:	fb00 f707 	mul.w	r7, r0, r7
 80003d4:	42a7      	cmp	r7, r4
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x92>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003e0:	f080 810a 	bcs.w	80005f8 <__udivmoddi4+0x29c>
 80003e4:	42a7      	cmp	r7, r4
 80003e6:	f240 8107 	bls.w	80005f8 <__udivmoddi4+0x29c>
 80003ea:	4464      	add	r4, ip
 80003ec:	3802      	subs	r0, #2
 80003ee:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003f2:	1be4      	subs	r4, r4, r7
 80003f4:	2600      	movs	r6, #0
 80003f6:	b11d      	cbz	r5, 8000400 <__udivmoddi4+0xa4>
 80003f8:	40d4      	lsrs	r4, r2
 80003fa:	2300      	movs	r3, #0
 80003fc:	e9c5 4300 	strd	r4, r3, [r5]
 8000400:	4631      	mov	r1, r6
 8000402:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000406:	428b      	cmp	r3, r1
 8000408:	d909      	bls.n	800041e <__udivmoddi4+0xc2>
 800040a:	2d00      	cmp	r5, #0
 800040c:	f000 80ef 	beq.w	80005ee <__udivmoddi4+0x292>
 8000410:	2600      	movs	r6, #0
 8000412:	e9c5 0100 	strd	r0, r1, [r5]
 8000416:	4630      	mov	r0, r6
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	fab3 f683 	clz	r6, r3
 8000422:	2e00      	cmp	r6, #0
 8000424:	d14a      	bne.n	80004bc <__udivmoddi4+0x160>
 8000426:	428b      	cmp	r3, r1
 8000428:	d302      	bcc.n	8000430 <__udivmoddi4+0xd4>
 800042a:	4282      	cmp	r2, r0
 800042c:	f200 80f9 	bhi.w	8000622 <__udivmoddi4+0x2c6>
 8000430:	1a84      	subs	r4, r0, r2
 8000432:	eb61 0303 	sbc.w	r3, r1, r3
 8000436:	2001      	movs	r0, #1
 8000438:	469e      	mov	lr, r3
 800043a:	2d00      	cmp	r5, #0
 800043c:	d0e0      	beq.n	8000400 <__udivmoddi4+0xa4>
 800043e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000442:	e7dd      	b.n	8000400 <__udivmoddi4+0xa4>
 8000444:	b902      	cbnz	r2, 8000448 <__udivmoddi4+0xec>
 8000446:	deff      	udf	#255	; 0xff
 8000448:	fab2 f282 	clz	r2, r2
 800044c:	2a00      	cmp	r2, #0
 800044e:	f040 8092 	bne.w	8000576 <__udivmoddi4+0x21a>
 8000452:	eba1 010c 	sub.w	r1, r1, ip
 8000456:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045a:	fa1f fe8c 	uxth.w	lr, ip
 800045e:	2601      	movs	r6, #1
 8000460:	0c20      	lsrs	r0, r4, #16
 8000462:	fbb1 f3f7 	udiv	r3, r1, r7
 8000466:	fb07 1113 	mls	r1, r7, r3, r1
 800046a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800046e:	fb0e f003 	mul.w	r0, lr, r3
 8000472:	4288      	cmp	r0, r1
 8000474:	d908      	bls.n	8000488 <__udivmoddi4+0x12c>
 8000476:	eb1c 0101 	adds.w	r1, ip, r1
 800047a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800047e:	d202      	bcs.n	8000486 <__udivmoddi4+0x12a>
 8000480:	4288      	cmp	r0, r1
 8000482:	f200 80cb 	bhi.w	800061c <__udivmoddi4+0x2c0>
 8000486:	4643      	mov	r3, r8
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000490:	fb07 1110 	mls	r1, r7, r0, r1
 8000494:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000498:	fb0e fe00 	mul.w	lr, lr, r0
 800049c:	45a6      	cmp	lr, r4
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x156>
 80004a0:	eb1c 0404 	adds.w	r4, ip, r4
 80004a4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004a8:	d202      	bcs.n	80004b0 <__udivmoddi4+0x154>
 80004aa:	45a6      	cmp	lr, r4
 80004ac:	f200 80bb 	bhi.w	8000626 <__udivmoddi4+0x2ca>
 80004b0:	4608      	mov	r0, r1
 80004b2:	eba4 040e 	sub.w	r4, r4, lr
 80004b6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80004ba:	e79c      	b.n	80003f6 <__udivmoddi4+0x9a>
 80004bc:	f1c6 0720 	rsb	r7, r6, #32
 80004c0:	40b3      	lsls	r3, r6
 80004c2:	fa22 fc07 	lsr.w	ip, r2, r7
 80004c6:	ea4c 0c03 	orr.w	ip, ip, r3
 80004ca:	fa20 f407 	lsr.w	r4, r0, r7
 80004ce:	fa01 f306 	lsl.w	r3, r1, r6
 80004d2:	431c      	orrs	r4, r3
 80004d4:	40f9      	lsrs	r1, r7
 80004d6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004da:	fa00 f306 	lsl.w	r3, r0, r6
 80004de:	fbb1 f8f9 	udiv	r8, r1, r9
 80004e2:	0c20      	lsrs	r0, r4, #16
 80004e4:	fa1f fe8c 	uxth.w	lr, ip
 80004e8:	fb09 1118 	mls	r1, r9, r8, r1
 80004ec:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004f0:	fb08 f00e 	mul.w	r0, r8, lr
 80004f4:	4288      	cmp	r0, r1
 80004f6:	fa02 f206 	lsl.w	r2, r2, r6
 80004fa:	d90b      	bls.n	8000514 <__udivmoddi4+0x1b8>
 80004fc:	eb1c 0101 	adds.w	r1, ip, r1
 8000500:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000504:	f080 8088 	bcs.w	8000618 <__udivmoddi4+0x2bc>
 8000508:	4288      	cmp	r0, r1
 800050a:	f240 8085 	bls.w	8000618 <__udivmoddi4+0x2bc>
 800050e:	f1a8 0802 	sub.w	r8, r8, #2
 8000512:	4461      	add	r1, ip
 8000514:	1a09      	subs	r1, r1, r0
 8000516:	b2a4      	uxth	r4, r4
 8000518:	fbb1 f0f9 	udiv	r0, r1, r9
 800051c:	fb09 1110 	mls	r1, r9, r0, r1
 8000520:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000524:	fb00 fe0e 	mul.w	lr, r0, lr
 8000528:	458e      	cmp	lr, r1
 800052a:	d908      	bls.n	800053e <__udivmoddi4+0x1e2>
 800052c:	eb1c 0101 	adds.w	r1, ip, r1
 8000530:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000534:	d26c      	bcs.n	8000610 <__udivmoddi4+0x2b4>
 8000536:	458e      	cmp	lr, r1
 8000538:	d96a      	bls.n	8000610 <__udivmoddi4+0x2b4>
 800053a:	3802      	subs	r0, #2
 800053c:	4461      	add	r1, ip
 800053e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000542:	fba0 9402 	umull	r9, r4, r0, r2
 8000546:	eba1 010e 	sub.w	r1, r1, lr
 800054a:	42a1      	cmp	r1, r4
 800054c:	46c8      	mov	r8, r9
 800054e:	46a6      	mov	lr, r4
 8000550:	d356      	bcc.n	8000600 <__udivmoddi4+0x2a4>
 8000552:	d053      	beq.n	80005fc <__udivmoddi4+0x2a0>
 8000554:	b15d      	cbz	r5, 800056e <__udivmoddi4+0x212>
 8000556:	ebb3 0208 	subs.w	r2, r3, r8
 800055a:	eb61 010e 	sbc.w	r1, r1, lr
 800055e:	fa01 f707 	lsl.w	r7, r1, r7
 8000562:	fa22 f306 	lsr.w	r3, r2, r6
 8000566:	40f1      	lsrs	r1, r6
 8000568:	431f      	orrs	r7, r3
 800056a:	e9c5 7100 	strd	r7, r1, [r5]
 800056e:	2600      	movs	r6, #0
 8000570:	4631      	mov	r1, r6
 8000572:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000576:	f1c2 0320 	rsb	r3, r2, #32
 800057a:	40d8      	lsrs	r0, r3
 800057c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000580:	fa21 f303 	lsr.w	r3, r1, r3
 8000584:	4091      	lsls	r1, r2
 8000586:	4301      	orrs	r1, r0
 8000588:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800058c:	fa1f fe8c 	uxth.w	lr, ip
 8000590:	fbb3 f0f7 	udiv	r0, r3, r7
 8000594:	fb07 3610 	mls	r6, r7, r0, r3
 8000598:	0c0b      	lsrs	r3, r1, #16
 800059a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800059e:	fb00 f60e 	mul.w	r6, r0, lr
 80005a2:	429e      	cmp	r6, r3
 80005a4:	fa04 f402 	lsl.w	r4, r4, r2
 80005a8:	d908      	bls.n	80005bc <__udivmoddi4+0x260>
 80005aa:	eb1c 0303 	adds.w	r3, ip, r3
 80005ae:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80005b2:	d22f      	bcs.n	8000614 <__udivmoddi4+0x2b8>
 80005b4:	429e      	cmp	r6, r3
 80005b6:	d92d      	bls.n	8000614 <__udivmoddi4+0x2b8>
 80005b8:	3802      	subs	r0, #2
 80005ba:	4463      	add	r3, ip
 80005bc:	1b9b      	subs	r3, r3, r6
 80005be:	b289      	uxth	r1, r1
 80005c0:	fbb3 f6f7 	udiv	r6, r3, r7
 80005c4:	fb07 3316 	mls	r3, r7, r6, r3
 80005c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005cc:	fb06 f30e 	mul.w	r3, r6, lr
 80005d0:	428b      	cmp	r3, r1
 80005d2:	d908      	bls.n	80005e6 <__udivmoddi4+0x28a>
 80005d4:	eb1c 0101 	adds.w	r1, ip, r1
 80005d8:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80005dc:	d216      	bcs.n	800060c <__udivmoddi4+0x2b0>
 80005de:	428b      	cmp	r3, r1
 80005e0:	d914      	bls.n	800060c <__udivmoddi4+0x2b0>
 80005e2:	3e02      	subs	r6, #2
 80005e4:	4461      	add	r1, ip
 80005e6:	1ac9      	subs	r1, r1, r3
 80005e8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005ec:	e738      	b.n	8000460 <__udivmoddi4+0x104>
 80005ee:	462e      	mov	r6, r5
 80005f0:	4628      	mov	r0, r5
 80005f2:	e705      	b.n	8000400 <__udivmoddi4+0xa4>
 80005f4:	4606      	mov	r6, r0
 80005f6:	e6e3      	b.n	80003c0 <__udivmoddi4+0x64>
 80005f8:	4618      	mov	r0, r3
 80005fa:	e6f8      	b.n	80003ee <__udivmoddi4+0x92>
 80005fc:	454b      	cmp	r3, r9
 80005fe:	d2a9      	bcs.n	8000554 <__udivmoddi4+0x1f8>
 8000600:	ebb9 0802 	subs.w	r8, r9, r2
 8000604:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000608:	3801      	subs	r0, #1
 800060a:	e7a3      	b.n	8000554 <__udivmoddi4+0x1f8>
 800060c:	4646      	mov	r6, r8
 800060e:	e7ea      	b.n	80005e6 <__udivmoddi4+0x28a>
 8000610:	4620      	mov	r0, r4
 8000612:	e794      	b.n	800053e <__udivmoddi4+0x1e2>
 8000614:	4640      	mov	r0, r8
 8000616:	e7d1      	b.n	80005bc <__udivmoddi4+0x260>
 8000618:	46d0      	mov	r8, sl
 800061a:	e77b      	b.n	8000514 <__udivmoddi4+0x1b8>
 800061c:	3b02      	subs	r3, #2
 800061e:	4461      	add	r1, ip
 8000620:	e732      	b.n	8000488 <__udivmoddi4+0x12c>
 8000622:	4630      	mov	r0, r6
 8000624:	e709      	b.n	800043a <__udivmoddi4+0xde>
 8000626:	4464      	add	r4, ip
 8000628:	3802      	subs	r0, #2
 800062a:	e742      	b.n	80004b2 <__udivmoddi4+0x156>

0800062c <__aeabi_idiv0>:
 800062c:	4770      	bx	lr
 800062e:	bf00      	nop

08000630 <PrivilegiosSVC>:
static void MX_USART3_UART_Init(void);
static void MX_USB_OTG_FS_PCD_Init(void);


static void PrivilegiosSVC (void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b088      	sub	sp, #32
 8000634:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8000636:	f3ef 8314 	mrs	r3, CONTROL
 800063a:	607b      	str	r3, [r7, #4]
  return(result);
 800063c:	687b      	ldr	r3, [r7, #4]
    uint32_t x = __get_CONTROL ();
 800063e:	61fb      	str	r3, [r7, #28]
    x |= 1;
 8000640:	69fb      	ldr	r3, [r7, #28]
 8000642:	f043 0301 	orr.w	r3, r3, #1
 8000646:	61fb      	str	r3, [r7, #28]
 8000648:	69fb      	ldr	r3, [r7, #28]
 800064a:	60bb      	str	r3, [r7, #8]
  \details Writes the given value to the Control Register.
  \param [in]    control  Control Register value to set
 */
__STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 800064c:	68bb      	ldr	r3, [r7, #8]
 800064e:	f383 8814 	msr	CONTROL, r3
}
 8000652:	bf00      	nop
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8000654:	f3ef 8314 	mrs	r3, CONTROL
 8000658:	60fb      	str	r3, [r7, #12]
  return(result);
 800065a:	68fb      	ldr	r3, [r7, #12]
    __set_CONTROL (x);
    x = __get_CONTROL ();
 800065c:	61fb      	str	r3, [r7, #28]
    x &= ~1u;
 800065e:	69fb      	ldr	r3, [r7, #28]
 8000660:	f023 0301 	bic.w	r3, r3, #1
 8000664:	61fb      	str	r3, [r7, #28]
 8000666:	69fb      	ldr	r3, [r7, #28]
 8000668:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 800066a:	693b      	ldr	r3, [r7, #16]
 800066c:	f383 8814 	msr	CONTROL, r3
}
 8000670:	bf00      	nop
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8000672:	f3ef 8314 	mrs	r3, CONTROL
 8000676:	617b      	str	r3, [r7, #20]
  return(result);
 8000678:	697b      	ldr	r3, [r7, #20]
    __set_CONTROL (x);
    x = __get_CONTROL ();
 800067a:	61fb      	str	r3, [r7, #28]
    asm_svc ();
 800067c:	f7ff fdb6 	bl	80001ec <asm_svc>
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8000680:	f3ef 8314 	mrs	r3, CONTROL
 8000684:	61bb      	str	r3, [r7, #24]
  return(result);
 8000686:	69bb      	ldr	r3, [r7, #24]
    x = __get_CONTROL ();
 8000688:	61fb      	str	r3, [r7, #28]
}
 800068a:	bf00      	nop
 800068c:	3720      	adds	r7, #32
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
	...

08000694 <main>:

int main(void)
{
 8000694:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000698:	b0c4      	sub	sp, #272	; 0x110
 800069a:	af00      	add	r7, sp, #0

  HAL_Init();
 800069c:	f000 fd0c 	bl	80010b8 <HAL_Init>
  SystemClock_Config();
 80006a0:	f000 f950 	bl	8000944 <SystemClock_Config>
  MX_GPIO_Init();
 80006a4:	f000 fa5e 	bl	8000b64 <MX_GPIO_Init>
  MX_ETH_Init();
 80006a8:	f000 f9b6 	bl	8000a18 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80006ac:	f000 fa02 	bl	8000ab4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80006b0:	f000 fa2a 	bl	8000b08 <MX_USB_OTG_FS_PCD_Init>

  PrivilegiosSVC ();
 80006b4:	f7ff ffbc 	bl	8000630 <PrivilegiosSVC>

  const uint32_t Resultado = asm_sum (5, 3);
 80006b8:	2103      	movs	r1, #3
 80006ba:	2005      	movs	r0, #5
 80006bc:	f7ff fd98 	bl	80001f0 <asm_sum>
 80006c0:	f8c7 0108 	str.w	r0, [r7, #264]	; 0x108

  uint32_t longitud = 6;
 80006c4:	2306      	movs	r3, #6
 80006c6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

  uint32_t vector_input_32 [] = {0,1,2,3,4,5};
 80006ca:	4b97      	ldr	r3, [pc, #604]	; (8000928 <main+0x294>)
 80006cc:	f107 05bc 	add.w	r5, r7, #188	; 0xbc
 80006d0:	461c      	mov	r4, r3
 80006d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80006d6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80006da:	e885 0003 	stmia.w	r5, {r0, r1}
  uint32_t vector_output_32 [longitud];
 80006de:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 80006e2:	460b      	mov	r3, r1
 80006e4:	3b01      	subs	r3, #1
 80006e6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80006ea:	2300      	movs	r3, #0
 80006ec:	4688      	mov	r8, r1
 80006ee:	4699      	mov	r9, r3
 80006f0:	f04f 0200 	mov.w	r2, #0
 80006f4:	f04f 0300 	mov.w	r3, #0
 80006f8:	ea4f 1349 	mov.w	r3, r9, lsl #5
 80006fc:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8000700:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8000704:	2300      	movs	r3, #0
 8000706:	468a      	mov	sl, r1
 8000708:	469b      	mov	fp, r3
 800070a:	f04f 0200 	mov.w	r2, #0
 800070e:	f04f 0300 	mov.w	r3, #0
 8000712:	ea4f 134b 	mov.w	r3, fp, lsl #5
 8000716:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 800071a:	ea4f 124a 	mov.w	r2, sl, lsl #5
 800071e:	008b      	lsls	r3, r1, #2
 8000720:	3307      	adds	r3, #7
 8000722:	08db      	lsrs	r3, r3, #3
 8000724:	00db      	lsls	r3, r3, #3
 8000726:	ebad 0d03 	sub.w	sp, sp, r3
 800072a:	466b      	mov	r3, sp
 800072c:	3303      	adds	r3, #3
 800072e:	089b      	lsrs	r3, r3, #2
 8000730:	009b      	lsls	r3, r3, #2
 8000732:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
  uint32_t escalar_32 = 9;
 8000736:	2309      	movs	r3, #9
 8000738:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  asm_productoEscalar32 (&vector_input_32, &vector_output_32, longitud, escalar_32);
 800073c:	f107 00bc 	add.w	r0, r7, #188	; 0xbc
 8000740:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8000744:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8000748:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 800074c:	f7ff fd59 	bl	8000202 <asm_productoEscalar32>


  uint16_t vector_input_16 [] = {0,1,2,3,4,150};
 8000750:	4a76      	ldr	r2, [pc, #472]	; (800092c <main+0x298>)
 8000752:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8000756:	ca07      	ldmia	r2, {r0, r1, r2}
 8000758:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  uint16_t vector_output_16 [longitud];
 800075c:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 8000760:	460b      	mov	r3, r1
 8000762:	3b01      	subs	r3, #1
 8000764:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8000768:	2300      	movs	r3, #0
 800076a:	61b9      	str	r1, [r7, #24]
 800076c:	61fb      	str	r3, [r7, #28]
 800076e:	f04f 0200 	mov.w	r2, #0
 8000772:	f04f 0300 	mov.w	r3, #0
 8000776:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 800077a:	4628      	mov	r0, r5
 800077c:	0103      	lsls	r3, r0, #4
 800077e:	4620      	mov	r0, r4
 8000780:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8000784:	4620      	mov	r0, r4
 8000786:	0102      	lsls	r2, r0, #4
 8000788:	2300      	movs	r3, #0
 800078a:	6139      	str	r1, [r7, #16]
 800078c:	617b      	str	r3, [r7, #20]
 800078e:	f04f 0200 	mov.w	r2, #0
 8000792:	f04f 0300 	mov.w	r3, #0
 8000796:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800079a:	4628      	mov	r0, r5
 800079c:	0103      	lsls	r3, r0, #4
 800079e:	4620      	mov	r0, r4
 80007a0:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 80007a4:	4620      	mov	r0, r4
 80007a6:	0102      	lsls	r2, r0, #4
 80007a8:	004b      	lsls	r3, r1, #1
 80007aa:	3307      	adds	r3, #7
 80007ac:	08db      	lsrs	r3, r3, #3
 80007ae:	00db      	lsls	r3, r3, #3
 80007b0:	ebad 0d03 	sub.w	sp, sp, r3
 80007b4:	466b      	mov	r3, sp
 80007b6:	3301      	adds	r3, #1
 80007b8:	085b      	lsrs	r3, r3, #1
 80007ba:	005b      	lsls	r3, r3, #1
 80007bc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  uint16_t escalar_16 = 9;
 80007c0:	2309      	movs	r3, #9
 80007c2:	f8a7 30f2 	strh.w	r3, [r7, #242]	; 0xf2
  asm_productoEscalar16 (&vector_input_16, &vector_output_16, longitud, escalar_16);
 80007c6:	f8b7 30f2 	ldrh.w	r3, [r7, #242]	; 0xf2
 80007ca:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 80007ce:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80007d2:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 80007d6:	f7ff fd1e 	bl	8000216 <asm_productoEscalar16>


  uint16_t vector_input_12 [] = {1000,2000,3000,4000,5000,10000};
 80007da:	4a55      	ldr	r2, [pc, #340]	; (8000930 <main+0x29c>)
 80007dc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80007e0:	ca07      	ldmia	r2, {r0, r1, r2}
 80007e2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  uint16_t vector_output_12 [longitud];
 80007e6:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 80007ea:	460b      	mov	r3, r1
 80007ec:	3b01      	subs	r3, #1
 80007ee:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80007f2:	2300      	movs	r3, #0
 80007f4:	60b9      	str	r1, [r7, #8]
 80007f6:	60fb      	str	r3, [r7, #12]
 80007f8:	f04f 0200 	mov.w	r2, #0
 80007fc:	f04f 0300 	mov.w	r3, #0
 8000800:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8000804:	4628      	mov	r0, r5
 8000806:	0103      	lsls	r3, r0, #4
 8000808:	4620      	mov	r0, r4
 800080a:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 800080e:	4620      	mov	r0, r4
 8000810:	0102      	lsls	r2, r0, #4
 8000812:	2300      	movs	r3, #0
 8000814:	6039      	str	r1, [r7, #0]
 8000816:	607b      	str	r3, [r7, #4]
 8000818:	f04f 0200 	mov.w	r2, #0
 800081c:	f04f 0300 	mov.w	r3, #0
 8000820:	e9d7 4500 	ldrd	r4, r5, [r7]
 8000824:	4628      	mov	r0, r5
 8000826:	0103      	lsls	r3, r0, #4
 8000828:	4620      	mov	r0, r4
 800082a:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 800082e:	4620      	mov	r0, r4
 8000830:	0102      	lsls	r2, r0, #4
 8000832:	004b      	lsls	r3, r1, #1
 8000834:	3307      	adds	r3, #7
 8000836:	08db      	lsrs	r3, r3, #3
 8000838:	00db      	lsls	r3, r3, #3
 800083a:	ebad 0d03 	sub.w	sp, sp, r3
 800083e:	466b      	mov	r3, sp
 8000840:	3301      	adds	r3, #1
 8000842:	085b      	lsrs	r3, r3, #1
 8000844:	005b      	lsls	r3, r3, #1
 8000846:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  uint16_t escalar_12 = 9;
 800084a:	2309      	movs	r3, #9
 800084c:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
  asm_productoEscalar12 (&vector_input_12, &vector_output_12, longitud, escalar_12);
 8000850:	f8b7 30e6 	ldrh.w	r3, [r7, #230]	; 0xe6
 8000854:	f107 00a4 	add.w	r0, r7, #164	; 0xa4
 8000858:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800085c:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 8000860:	f7ff fce3 	bl	800022a <asm_productoEscalar12>



  /*Ejercicio 7 Realizar una función que reciba un vector de números signados de 32 bits y devuelva la posición del máximo del vector.*/
  uint32_t 	vector_input_max_32 [] = {-56,-23,-388,-2,-4000};
 8000864:	4b33      	ldr	r3, [pc, #204]	; (8000934 <main+0x2a0>)
 8000866:	f107 0490 	add.w	r4, r7, #144	; 0x90
 800086a:	461d      	mov	r5, r3
 800086c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800086e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000870:	682b      	ldr	r3, [r5, #0]
 8000872:	6023      	str	r3, [r4, #0]
  uint16_t	longitud_max = 5;
 8000874:	2305      	movs	r3, #5
 8000876:	f8a7 30e4 	strh.w	r3, [r7, #228]	; 0xe4
  int32_t	maxReturnValue = asm_max (vector_input_max_32, longitud_max);
 800087a:	f8b7 20e4 	ldrh.w	r2, [r7, #228]	; 0xe4
 800087e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000882:	4611      	mov	r1, r2
 8000884:	4618      	mov	r0, r3
 8000886:	f7ff fce0 	bl	800024a <asm_max>
 800088a:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0

  /*Ejercicio 8 Realizar una función que reciba un vector de muestras signadas de 32 bits y lo decime descartando una cada N muestras.*/
  uint32_t 	vectorDecimar [] = {8,3,4,62,7,1,1};
 800088e:	4b2a      	ldr	r3, [pc, #168]	; (8000938 <main+0x2a4>)
 8000890:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8000894:	461d      	mov	r5, r3
 8000896:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000898:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800089a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800089e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  uint32_t 	vectorDecimado [longitudVectorDecimar] = {0};
 80008a2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80008a6:	2200      	movs	r2, #0
 80008a8:	601a      	str	r2, [r3, #0]
 80008aa:	605a      	str	r2, [r3, #4]
 80008ac:	609a      	str	r2, [r3, #8]
 80008ae:	60da      	str	r2, [r3, #12]
 80008b0:	611a      	str	r2, [r3, #16]
 80008b2:	615a      	str	r2, [r3, #20]
 80008b4:	619a      	str	r2, [r3, #24]
  int32_t	muestrasDescartar = 4;
 80008b6:	2304      	movs	r3, #4
 80008b8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  asm_downsampleM (&vectorDecimar, &vectorDecimado, longitudVectorDecimar, muestrasDescartar);
 80008bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80008c0:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80008c4:	f107 0074 	add.w	r0, r7, #116	; 0x74
 80008c8:	2207      	movs	r2, #7
 80008ca:	f7ff fcce 	bl	800026a <asm_downsampleM>


  /*9) Realizar una función que reciba un vector de muestras no signadas de 16 bits e invierta su orden. */
  uint16_t asmInvertirArrayIn [] = {8,3,4,62,7,1,1};
 80008ce:	4b1b      	ldr	r3, [pc, #108]	; (800093c <main+0x2a8>)
 80008d0:	f107 0448 	add.w	r4, r7, #72	; 0x48
 80008d4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008d6:	c407      	stmia	r4!, {r0, r1, r2}
 80008d8:	8023      	strh	r3, [r4, #0]
  uint32_t asmInvertirLongitud = 7;
 80008da:	2307      	movs	r3, #7
 80008dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  asm_invertir (asmInvertirArrayIn, asmInvertirLongitud);
 80008e0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80008e4:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 80008e8:	4618      	mov	r0, r3
 80008ea:	f7ff fcd3 	bl	8000294 <asm_invertir>

  //5) Realice una función que implemente un filtro de ventana móvil de 10 valores sobre un vector de muestras.
  //void filtroVentana10(uint16_t * vectorIn, uint16_t * vectorOut, uint32_t longitudVectorIn);
  uint32_t filtroVentana10_longitud = 10;
 80008ee:	230a      	movs	r3, #10
 80008f0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  uint16_t vector_input_filtroVentana10_16bits [] = {1,2,3,4,5,6,7,8,9,10};
 80008f4:	4b12      	ldr	r3, [pc, #72]	; (8000940 <main+0x2ac>)
 80008f6:	f107 0434 	add.w	r4, r7, #52	; 0x34
 80008fa:	461d      	mov	r5, r3
 80008fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000900:	682b      	ldr	r3, [r5, #0]
 8000902:	6023      	str	r3, [r4, #0]
  uint16_t vector_output_filtroVentana10_16bits [10] = {0};
 8000904:	f107 0320 	add.w	r3, r7, #32
 8000908:	2200      	movs	r2, #0
 800090a:	601a      	str	r2, [r3, #0]
 800090c:	605a      	str	r2, [r3, #4]
 800090e:	609a      	str	r2, [r3, #8]
 8000910:	60da      	str	r2, [r3, #12]
 8000912:	611a      	str	r2, [r3, #16]
  asm_filtroVentana10 (vector_input_filtroVentana10_16bits, vector_output_filtroVentana10_16bits, filtroVentana10_longitud);
 8000914:	f107 0120 	add.w	r1, r7, #32
 8000918:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800091c:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8000920:	4618      	mov	r0, r3
 8000922:	f7ff fcd3 	bl	80002cc <asm_filtroVentana10>



  while (1)
 8000926:	e7fe      	b.n	8000926 <main+0x292>
 8000928:	080034c4 	.word	0x080034c4
 800092c:	080034dc 	.word	0x080034dc
 8000930:	080034e8 	.word	0x080034e8
 8000934:	080034f4 	.word	0x080034f4
 8000938:	08003508 	.word	0x08003508
 800093c:	08003524 	.word	0x08003524
 8000940:	08003534 	.word	0x08003534

08000944 <SystemClock_Config>:

  }
}

void SystemClock_Config(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b094      	sub	sp, #80	; 0x50
 8000948:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800094a:	f107 0320 	add.w	r3, r7, #32
 800094e:	2230      	movs	r2, #48	; 0x30
 8000950:	2100      	movs	r1, #0
 8000952:	4618      	mov	r0, r3
 8000954:	f002 fda2 	bl	800349c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000958:	f107 030c 	add.w	r3, r7, #12
 800095c:	2200      	movs	r2, #0
 800095e:	601a      	str	r2, [r3, #0]
 8000960:	605a      	str	r2, [r3, #4]
 8000962:	609a      	str	r2, [r3, #8]
 8000964:	60da      	str	r2, [r3, #12]
 8000966:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000968:	2300      	movs	r3, #0
 800096a:	60bb      	str	r3, [r7, #8]
 800096c:	4b28      	ldr	r3, [pc, #160]	; (8000a10 <SystemClock_Config+0xcc>)
 800096e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000970:	4a27      	ldr	r2, [pc, #156]	; (8000a10 <SystemClock_Config+0xcc>)
 8000972:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000976:	6413      	str	r3, [r2, #64]	; 0x40
 8000978:	4b25      	ldr	r3, [pc, #148]	; (8000a10 <SystemClock_Config+0xcc>)
 800097a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000980:	60bb      	str	r3, [r7, #8]
 8000982:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000984:	2300      	movs	r3, #0
 8000986:	607b      	str	r3, [r7, #4]
 8000988:	4b22      	ldr	r3, [pc, #136]	; (8000a14 <SystemClock_Config+0xd0>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	4a21      	ldr	r2, [pc, #132]	; (8000a14 <SystemClock_Config+0xd0>)
 800098e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000992:	6013      	str	r3, [r2, #0]
 8000994:	4b1f      	ldr	r3, [pc, #124]	; (8000a14 <SystemClock_Config+0xd0>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800099c:	607b      	str	r3, [r7, #4]
 800099e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009a0:	2301      	movs	r3, #1
 80009a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80009a4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80009a8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009aa:	2302      	movs	r3, #2
 80009ac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009ae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80009b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80009b4:	2304      	movs	r3, #4
 80009b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80009b8:	23a8      	movs	r3, #168	; 0xa8
 80009ba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009bc:	2302      	movs	r3, #2
 80009be:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80009c0:	2307      	movs	r3, #7
 80009c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009c4:	f107 0320 	add.w	r3, r7, #32
 80009c8:	4618      	mov	r0, r3
 80009ca:	f001 fae7 	bl	8001f9c <HAL_RCC_OscConfig>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80009d4:	f000 f974 	bl	8000cc0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009d8:	230f      	movs	r3, #15
 80009da:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009dc:	2302      	movs	r3, #2
 80009de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009e0:	2300      	movs	r3, #0
 80009e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80009e4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80009e8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80009ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009ee:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80009f0:	f107 030c 	add.w	r3, r7, #12
 80009f4:	2105      	movs	r1, #5
 80009f6:	4618      	mov	r0, r3
 80009f8:	f001 fd48 	bl	800248c <HAL_RCC_ClockConfig>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000a02:	f000 f95d 	bl	8000cc0 <Error_Handler>
  }
}
 8000a06:	bf00      	nop
 8000a08:	3750      	adds	r7, #80	; 0x50
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	40023800 	.word	0x40023800
 8000a14:	40007000 	.word	0x40007000

08000a18 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000a1c:	4b1f      	ldr	r3, [pc, #124]	; (8000a9c <MX_ETH_Init+0x84>)
 8000a1e:	4a20      	ldr	r2, [pc, #128]	; (8000aa0 <MX_ETH_Init+0x88>)
 8000a20:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000a22:	4b20      	ldr	r3, [pc, #128]	; (8000aa4 <MX_ETH_Init+0x8c>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000a28:	4b1e      	ldr	r3, [pc, #120]	; (8000aa4 <MX_ETH_Init+0x8c>)
 8000a2a:	2280      	movs	r2, #128	; 0x80
 8000a2c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000a2e:	4b1d      	ldr	r3, [pc, #116]	; (8000aa4 <MX_ETH_Init+0x8c>)
 8000a30:	22e1      	movs	r2, #225	; 0xe1
 8000a32:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000a34:	4b1b      	ldr	r3, [pc, #108]	; (8000aa4 <MX_ETH_Init+0x8c>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000a3a:	4b1a      	ldr	r3, [pc, #104]	; (8000aa4 <MX_ETH_Init+0x8c>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000a40:	4b18      	ldr	r3, [pc, #96]	; (8000aa4 <MX_ETH_Init+0x8c>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000a46:	4b15      	ldr	r3, [pc, #84]	; (8000a9c <MX_ETH_Init+0x84>)
 8000a48:	4a16      	ldr	r2, [pc, #88]	; (8000aa4 <MX_ETH_Init+0x8c>)
 8000a4a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000a4c:	4b13      	ldr	r3, [pc, #76]	; (8000a9c <MX_ETH_Init+0x84>)
 8000a4e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000a52:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000a54:	4b11      	ldr	r3, [pc, #68]	; (8000a9c <MX_ETH_Init+0x84>)
 8000a56:	4a14      	ldr	r2, [pc, #80]	; (8000aa8 <MX_ETH_Init+0x90>)
 8000a58:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000a5a:	4b10      	ldr	r3, [pc, #64]	; (8000a9c <MX_ETH_Init+0x84>)
 8000a5c:	4a13      	ldr	r2, [pc, #76]	; (8000aac <MX_ETH_Init+0x94>)
 8000a5e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000a60:	4b0e      	ldr	r3, [pc, #56]	; (8000a9c <MX_ETH_Init+0x84>)
 8000a62:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000a66:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000a68:	480c      	ldr	r0, [pc, #48]	; (8000a9c <MX_ETH_Init+0x84>)
 8000a6a:	f000 fca1 	bl	80013b0 <HAL_ETH_Init>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000a74:	f000 f924 	bl	8000cc0 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000a78:	2238      	movs	r2, #56	; 0x38
 8000a7a:	2100      	movs	r1, #0
 8000a7c:	480c      	ldr	r0, [pc, #48]	; (8000ab0 <MX_ETH_Init+0x98>)
 8000a7e:	f002 fd0d 	bl	800349c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000a82:	4b0b      	ldr	r3, [pc, #44]	; (8000ab0 <MX_ETH_Init+0x98>)
 8000a84:	2221      	movs	r2, #33	; 0x21
 8000a86:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000a88:	4b09      	ldr	r3, [pc, #36]	; (8000ab0 <MX_ETH_Init+0x98>)
 8000a8a:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000a8e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000a90:	4b07      	ldr	r3, [pc, #28]	; (8000ab0 <MX_ETH_Init+0x98>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000a96:	bf00      	nop
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	200001a0 	.word	0x200001a0
 8000aa0:	40028000 	.word	0x40028000
 8000aa4:	200007a0 	.word	0x200007a0
 8000aa8:	20000100 	.word	0x20000100
 8000aac:	20000060 	.word	0x20000060
 8000ab0:	20000028 	.word	0x20000028

08000ab4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ab8:	4b11      	ldr	r3, [pc, #68]	; (8000b00 <MX_USART3_UART_Init+0x4c>)
 8000aba:	4a12      	ldr	r2, [pc, #72]	; (8000b04 <MX_USART3_UART_Init+0x50>)
 8000abc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000abe:	4b10      	ldr	r3, [pc, #64]	; (8000b00 <MX_USART3_UART_Init+0x4c>)
 8000ac0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ac4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ac6:	4b0e      	ldr	r3, [pc, #56]	; (8000b00 <MX_USART3_UART_Init+0x4c>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000acc:	4b0c      	ldr	r3, [pc, #48]	; (8000b00 <MX_USART3_UART_Init+0x4c>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ad2:	4b0b      	ldr	r3, [pc, #44]	; (8000b00 <MX_USART3_UART_Init+0x4c>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ad8:	4b09      	ldr	r3, [pc, #36]	; (8000b00 <MX_USART3_UART_Init+0x4c>)
 8000ada:	220c      	movs	r2, #12
 8000adc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ade:	4b08      	ldr	r3, [pc, #32]	; (8000b00 <MX_USART3_UART_Init+0x4c>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ae4:	4b06      	ldr	r3, [pc, #24]	; (8000b00 <MX_USART3_UART_Init+0x4c>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000aea:	4805      	ldr	r0, [pc, #20]	; (8000b00 <MX_USART3_UART_Init+0x4c>)
 8000aec:	f001 feee 	bl	80028cc <HAL_UART_Init>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000af6:	f000 f8e3 	bl	8000cc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000afa:	bf00      	nop
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	20000250 	.word	0x20000250
 8000b04:	40004800 	.word	0x40004800

08000b08 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000b0c:	4b14      	ldr	r3, [pc, #80]	; (8000b60 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b0e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000b12:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000b14:	4b12      	ldr	r3, [pc, #72]	; (8000b60 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b16:	2204      	movs	r2, #4
 8000b18:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000b1a:	4b11      	ldr	r3, [pc, #68]	; (8000b60 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b1c:	2202      	movs	r2, #2
 8000b1e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000b20:	4b0f      	ldr	r3, [pc, #60]	; (8000b60 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000b26:	4b0e      	ldr	r3, [pc, #56]	; (8000b60 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b28:	2202      	movs	r2, #2
 8000b2a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000b2c:	4b0c      	ldr	r3, [pc, #48]	; (8000b60 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b2e:	2201      	movs	r2, #1
 8000b30:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000b32:	4b0b      	ldr	r3, [pc, #44]	; (8000b60 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000b38:	4b09      	ldr	r3, [pc, #36]	; (8000b60 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000b3e:	4b08      	ldr	r3, [pc, #32]	; (8000b60 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b40:	2201      	movs	r2, #1
 8000b42:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000b44:	4b06      	ldr	r3, [pc, #24]	; (8000b60 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000b4a:	4805      	ldr	r0, [pc, #20]	; (8000b60 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b4c:	f001 f909 	bl	8001d62 <HAL_PCD_Init>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000b56:	f000 f8b3 	bl	8000cc0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000b5a:	bf00      	nop
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	20000294 	.word	0x20000294

08000b64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b08c      	sub	sp, #48	; 0x30
 8000b68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b6a:	f107 031c 	add.w	r3, r7, #28
 8000b6e:	2200      	movs	r2, #0
 8000b70:	601a      	str	r2, [r3, #0]
 8000b72:	605a      	str	r2, [r3, #4]
 8000b74:	609a      	str	r2, [r3, #8]
 8000b76:	60da      	str	r2, [r3, #12]
 8000b78:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	61bb      	str	r3, [r7, #24]
 8000b7e:	4b4c      	ldr	r3, [pc, #304]	; (8000cb0 <MX_GPIO_Init+0x14c>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	4a4b      	ldr	r2, [pc, #300]	; (8000cb0 <MX_GPIO_Init+0x14c>)
 8000b84:	f043 0304 	orr.w	r3, r3, #4
 8000b88:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8a:	4b49      	ldr	r3, [pc, #292]	; (8000cb0 <MX_GPIO_Init+0x14c>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	f003 0304 	and.w	r3, r3, #4
 8000b92:	61bb      	str	r3, [r7, #24]
 8000b94:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b96:	2300      	movs	r3, #0
 8000b98:	617b      	str	r3, [r7, #20]
 8000b9a:	4b45      	ldr	r3, [pc, #276]	; (8000cb0 <MX_GPIO_Init+0x14c>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	4a44      	ldr	r2, [pc, #272]	; (8000cb0 <MX_GPIO_Init+0x14c>)
 8000ba0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba6:	4b42      	ldr	r3, [pc, #264]	; (8000cb0 <MX_GPIO_Init+0x14c>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000baa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bae:	617b      	str	r3, [r7, #20]
 8000bb0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	613b      	str	r3, [r7, #16]
 8000bb6:	4b3e      	ldr	r3, [pc, #248]	; (8000cb0 <MX_GPIO_Init+0x14c>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bba:	4a3d      	ldr	r2, [pc, #244]	; (8000cb0 <MX_GPIO_Init+0x14c>)
 8000bbc:	f043 0301 	orr.w	r3, r3, #1
 8000bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc2:	4b3b      	ldr	r3, [pc, #236]	; (8000cb0 <MX_GPIO_Init+0x14c>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	f003 0301 	and.w	r3, r3, #1
 8000bca:	613b      	str	r3, [r7, #16]
 8000bcc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bce:	2300      	movs	r3, #0
 8000bd0:	60fb      	str	r3, [r7, #12]
 8000bd2:	4b37      	ldr	r3, [pc, #220]	; (8000cb0 <MX_GPIO_Init+0x14c>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	4a36      	ldr	r2, [pc, #216]	; (8000cb0 <MX_GPIO_Init+0x14c>)
 8000bd8:	f043 0302 	orr.w	r3, r3, #2
 8000bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bde:	4b34      	ldr	r3, [pc, #208]	; (8000cb0 <MX_GPIO_Init+0x14c>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be2:	f003 0302 	and.w	r3, r3, #2
 8000be6:	60fb      	str	r3, [r7, #12]
 8000be8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bea:	2300      	movs	r3, #0
 8000bec:	60bb      	str	r3, [r7, #8]
 8000bee:	4b30      	ldr	r3, [pc, #192]	; (8000cb0 <MX_GPIO_Init+0x14c>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf2:	4a2f      	ldr	r2, [pc, #188]	; (8000cb0 <MX_GPIO_Init+0x14c>)
 8000bf4:	f043 0308 	orr.w	r3, r3, #8
 8000bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfa:	4b2d      	ldr	r3, [pc, #180]	; (8000cb0 <MX_GPIO_Init+0x14c>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfe:	f003 0308 	and.w	r3, r3, #8
 8000c02:	60bb      	str	r3, [r7, #8]
 8000c04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c06:	2300      	movs	r3, #0
 8000c08:	607b      	str	r3, [r7, #4]
 8000c0a:	4b29      	ldr	r3, [pc, #164]	; (8000cb0 <MX_GPIO_Init+0x14c>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	4a28      	ldr	r2, [pc, #160]	; (8000cb0 <MX_GPIO_Init+0x14c>)
 8000c10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c14:	6313      	str	r3, [r2, #48]	; 0x30
 8000c16:	4b26      	ldr	r3, [pc, #152]	; (8000cb0 <MX_GPIO_Init+0x14c>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c1e:	607b      	str	r3, [r7, #4]
 8000c20:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000c22:	2200      	movs	r2, #0
 8000c24:	f244 0181 	movw	r1, #16513	; 0x4081
 8000c28:	4822      	ldr	r0, [pc, #136]	; (8000cb4 <MX_GPIO_Init+0x150>)
 8000c2a:	f001 f881 	bl	8001d30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000c2e:	2200      	movs	r2, #0
 8000c30:	2140      	movs	r1, #64	; 0x40
 8000c32:	4821      	ldr	r0, [pc, #132]	; (8000cb8 <MX_GPIO_Init+0x154>)
 8000c34:	f001 f87c 	bl	8001d30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000c38:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c3e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c44:	2300      	movs	r3, #0
 8000c46:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000c48:	f107 031c 	add.w	r3, r7, #28
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	481b      	ldr	r0, [pc, #108]	; (8000cbc <MX_GPIO_Init+0x158>)
 8000c50:	f000 fec2 	bl	80019d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000c54:	f244 0381 	movw	r3, #16513	; 0x4081
 8000c58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c62:	2300      	movs	r3, #0
 8000c64:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c66:	f107 031c 	add.w	r3, r7, #28
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	4811      	ldr	r0, [pc, #68]	; (8000cb4 <MX_GPIO_Init+0x150>)
 8000c6e:	f000 feb3 	bl	80019d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000c72:	2340      	movs	r3, #64	; 0x40
 8000c74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c76:	2301      	movs	r3, #1
 8000c78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000c82:	f107 031c 	add.w	r3, r7, #28
 8000c86:	4619      	mov	r1, r3
 8000c88:	480b      	ldr	r0, [pc, #44]	; (8000cb8 <MX_GPIO_Init+0x154>)
 8000c8a:	f000 fea5 	bl	80019d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000c8e:	2380      	movs	r3, #128	; 0x80
 8000c90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c92:	2300      	movs	r3, #0
 8000c94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c96:	2300      	movs	r3, #0
 8000c98:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000c9a:	f107 031c 	add.w	r3, r7, #28
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	4805      	ldr	r0, [pc, #20]	; (8000cb8 <MX_GPIO_Init+0x154>)
 8000ca2:	f000 fe99 	bl	80019d8 <HAL_GPIO_Init>

}
 8000ca6:	bf00      	nop
 8000ca8:	3730      	adds	r7, #48	; 0x30
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	40023800 	.word	0x40023800
 8000cb4:	40020400 	.word	0x40020400
 8000cb8:	40021800 	.word	0x40021800
 8000cbc:	40020800 	.word	0x40020800

08000cc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000cc4:	b672      	cpsid	i
}
 8000cc6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cc8:	e7fe      	b.n	8000cc8 <Error_Handler+0x8>
	...

08000ccc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b083      	sub	sp, #12
 8000cd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	607b      	str	r3, [r7, #4]
 8000cd6:	4b10      	ldr	r3, [pc, #64]	; (8000d18 <HAL_MspInit+0x4c>)
 8000cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cda:	4a0f      	ldr	r2, [pc, #60]	; (8000d18 <HAL_MspInit+0x4c>)
 8000cdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ce0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ce2:	4b0d      	ldr	r3, [pc, #52]	; (8000d18 <HAL_MspInit+0x4c>)
 8000ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ce6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cea:	607b      	str	r3, [r7, #4]
 8000cec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cee:	2300      	movs	r3, #0
 8000cf0:	603b      	str	r3, [r7, #0]
 8000cf2:	4b09      	ldr	r3, [pc, #36]	; (8000d18 <HAL_MspInit+0x4c>)
 8000cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf6:	4a08      	ldr	r2, [pc, #32]	; (8000d18 <HAL_MspInit+0x4c>)
 8000cf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cfc:	6413      	str	r3, [r2, #64]	; 0x40
 8000cfe:	4b06      	ldr	r3, [pc, #24]	; (8000d18 <HAL_MspInit+0x4c>)
 8000d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d06:	603b      	str	r3, [r7, #0]
 8000d08:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d0a:	bf00      	nop
 8000d0c:	370c      	adds	r7, #12
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	40023800 	.word	0x40023800

08000d1c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b08e      	sub	sp, #56	; 0x38
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d28:	2200      	movs	r2, #0
 8000d2a:	601a      	str	r2, [r3, #0]
 8000d2c:	605a      	str	r2, [r3, #4]
 8000d2e:	609a      	str	r2, [r3, #8]
 8000d30:	60da      	str	r2, [r3, #12]
 8000d32:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a55      	ldr	r2, [pc, #340]	; (8000e90 <HAL_ETH_MspInit+0x174>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	f040 80a4 	bne.w	8000e88 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000d40:	2300      	movs	r3, #0
 8000d42:	623b      	str	r3, [r7, #32]
 8000d44:	4b53      	ldr	r3, [pc, #332]	; (8000e94 <HAL_ETH_MspInit+0x178>)
 8000d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d48:	4a52      	ldr	r2, [pc, #328]	; (8000e94 <HAL_ETH_MspInit+0x178>)
 8000d4a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d4e:	6313      	str	r3, [r2, #48]	; 0x30
 8000d50:	4b50      	ldr	r3, [pc, #320]	; (8000e94 <HAL_ETH_MspInit+0x178>)
 8000d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d58:	623b      	str	r3, [r7, #32]
 8000d5a:	6a3b      	ldr	r3, [r7, #32]
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	61fb      	str	r3, [r7, #28]
 8000d60:	4b4c      	ldr	r3, [pc, #304]	; (8000e94 <HAL_ETH_MspInit+0x178>)
 8000d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d64:	4a4b      	ldr	r2, [pc, #300]	; (8000e94 <HAL_ETH_MspInit+0x178>)
 8000d66:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000d6a:	6313      	str	r3, [r2, #48]	; 0x30
 8000d6c:	4b49      	ldr	r3, [pc, #292]	; (8000e94 <HAL_ETH_MspInit+0x178>)
 8000d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d70:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000d74:	61fb      	str	r3, [r7, #28]
 8000d76:	69fb      	ldr	r3, [r7, #28]
 8000d78:	2300      	movs	r3, #0
 8000d7a:	61bb      	str	r3, [r7, #24]
 8000d7c:	4b45      	ldr	r3, [pc, #276]	; (8000e94 <HAL_ETH_MspInit+0x178>)
 8000d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d80:	4a44      	ldr	r2, [pc, #272]	; (8000e94 <HAL_ETH_MspInit+0x178>)
 8000d82:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000d86:	6313      	str	r3, [r2, #48]	; 0x30
 8000d88:	4b42      	ldr	r3, [pc, #264]	; (8000e94 <HAL_ETH_MspInit+0x178>)
 8000d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000d90:	61bb      	str	r3, [r7, #24]
 8000d92:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d94:	2300      	movs	r3, #0
 8000d96:	617b      	str	r3, [r7, #20]
 8000d98:	4b3e      	ldr	r3, [pc, #248]	; (8000e94 <HAL_ETH_MspInit+0x178>)
 8000d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9c:	4a3d      	ldr	r2, [pc, #244]	; (8000e94 <HAL_ETH_MspInit+0x178>)
 8000d9e:	f043 0304 	orr.w	r3, r3, #4
 8000da2:	6313      	str	r3, [r2, #48]	; 0x30
 8000da4:	4b3b      	ldr	r3, [pc, #236]	; (8000e94 <HAL_ETH_MspInit+0x178>)
 8000da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da8:	f003 0304 	and.w	r3, r3, #4
 8000dac:	617b      	str	r3, [r7, #20]
 8000dae:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db0:	2300      	movs	r3, #0
 8000db2:	613b      	str	r3, [r7, #16]
 8000db4:	4b37      	ldr	r3, [pc, #220]	; (8000e94 <HAL_ETH_MspInit+0x178>)
 8000db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db8:	4a36      	ldr	r2, [pc, #216]	; (8000e94 <HAL_ETH_MspInit+0x178>)
 8000dba:	f043 0301 	orr.w	r3, r3, #1
 8000dbe:	6313      	str	r3, [r2, #48]	; 0x30
 8000dc0:	4b34      	ldr	r3, [pc, #208]	; (8000e94 <HAL_ETH_MspInit+0x178>)
 8000dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc4:	f003 0301 	and.w	r3, r3, #1
 8000dc8:	613b      	str	r3, [r7, #16]
 8000dca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dcc:	2300      	movs	r3, #0
 8000dce:	60fb      	str	r3, [r7, #12]
 8000dd0:	4b30      	ldr	r3, [pc, #192]	; (8000e94 <HAL_ETH_MspInit+0x178>)
 8000dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd4:	4a2f      	ldr	r2, [pc, #188]	; (8000e94 <HAL_ETH_MspInit+0x178>)
 8000dd6:	f043 0302 	orr.w	r3, r3, #2
 8000dda:	6313      	str	r3, [r2, #48]	; 0x30
 8000ddc:	4b2d      	ldr	r3, [pc, #180]	; (8000e94 <HAL_ETH_MspInit+0x178>)
 8000dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de0:	f003 0302 	and.w	r3, r3, #2
 8000de4:	60fb      	str	r3, [r7, #12]
 8000de6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000de8:	2300      	movs	r3, #0
 8000dea:	60bb      	str	r3, [r7, #8]
 8000dec:	4b29      	ldr	r3, [pc, #164]	; (8000e94 <HAL_ETH_MspInit+0x178>)
 8000dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df0:	4a28      	ldr	r2, [pc, #160]	; (8000e94 <HAL_ETH_MspInit+0x178>)
 8000df2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000df6:	6313      	str	r3, [r2, #48]	; 0x30
 8000df8:	4b26      	ldr	r3, [pc, #152]	; (8000e94 <HAL_ETH_MspInit+0x178>)
 8000dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e00:	60bb      	str	r3, [r7, #8]
 8000e02:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000e04:	2332      	movs	r3, #50	; 0x32
 8000e06:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e08:	2302      	movs	r3, #2
 8000e0a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e10:	2303      	movs	r3, #3
 8000e12:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e14:	230b      	movs	r3, #11
 8000e16:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	481e      	ldr	r0, [pc, #120]	; (8000e98 <HAL_ETH_MspInit+0x17c>)
 8000e20:	f000 fdda 	bl	80019d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000e24:	2386      	movs	r3, #134	; 0x86
 8000e26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e28:	2302      	movs	r3, #2
 8000e2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e30:	2303      	movs	r3, #3
 8000e32:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e34:	230b      	movs	r3, #11
 8000e36:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	4817      	ldr	r0, [pc, #92]	; (8000e9c <HAL_ETH_MspInit+0x180>)
 8000e40:	f000 fdca 	bl	80019d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000e44:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e48:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4a:	2302      	movs	r3, #2
 8000e4c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e52:	2303      	movs	r3, #3
 8000e54:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e56:	230b      	movs	r3, #11
 8000e58:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000e5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e5e:	4619      	mov	r1, r3
 8000e60:	480f      	ldr	r0, [pc, #60]	; (8000ea0 <HAL_ETH_MspInit+0x184>)
 8000e62:	f000 fdb9 	bl	80019d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000e66:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000e6a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6c:	2302      	movs	r3, #2
 8000e6e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e70:	2300      	movs	r3, #0
 8000e72:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e74:	2303      	movs	r3, #3
 8000e76:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e78:	230b      	movs	r3, #11
 8000e7a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e80:	4619      	mov	r1, r3
 8000e82:	4808      	ldr	r0, [pc, #32]	; (8000ea4 <HAL_ETH_MspInit+0x188>)
 8000e84:	f000 fda8 	bl	80019d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000e88:	bf00      	nop
 8000e8a:	3738      	adds	r7, #56	; 0x38
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	40028000 	.word	0x40028000
 8000e94:	40023800 	.word	0x40023800
 8000e98:	40020800 	.word	0x40020800
 8000e9c:	40020000 	.word	0x40020000
 8000ea0:	40020400 	.word	0x40020400
 8000ea4:	40021800 	.word	0x40021800

08000ea8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b08a      	sub	sp, #40	; 0x28
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb0:	f107 0314 	add.w	r3, r7, #20
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	601a      	str	r2, [r3, #0]
 8000eb8:	605a      	str	r2, [r3, #4]
 8000eba:	609a      	str	r2, [r3, #8]
 8000ebc:	60da      	str	r2, [r3, #12]
 8000ebe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a19      	ldr	r2, [pc, #100]	; (8000f2c <HAL_UART_MspInit+0x84>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d12c      	bne.n	8000f24 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000eca:	2300      	movs	r3, #0
 8000ecc:	613b      	str	r3, [r7, #16]
 8000ece:	4b18      	ldr	r3, [pc, #96]	; (8000f30 <HAL_UART_MspInit+0x88>)
 8000ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed2:	4a17      	ldr	r2, [pc, #92]	; (8000f30 <HAL_UART_MspInit+0x88>)
 8000ed4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ed8:	6413      	str	r3, [r2, #64]	; 0x40
 8000eda:	4b15      	ldr	r3, [pc, #84]	; (8000f30 <HAL_UART_MspInit+0x88>)
 8000edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ede:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ee2:	613b      	str	r3, [r7, #16]
 8000ee4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	60fb      	str	r3, [r7, #12]
 8000eea:	4b11      	ldr	r3, [pc, #68]	; (8000f30 <HAL_UART_MspInit+0x88>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eee:	4a10      	ldr	r2, [pc, #64]	; (8000f30 <HAL_UART_MspInit+0x88>)
 8000ef0:	f043 0308 	orr.w	r3, r3, #8
 8000ef4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ef6:	4b0e      	ldr	r3, [pc, #56]	; (8000f30 <HAL_UART_MspInit+0x88>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efa:	f003 0308 	and.w	r3, r3, #8
 8000efe:	60fb      	str	r3, [r7, #12]
 8000f00:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000f02:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f08:	2302      	movs	r3, #2
 8000f0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f10:	2303      	movs	r3, #3
 8000f12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f14:	2307      	movs	r3, #7
 8000f16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f18:	f107 0314 	add.w	r3, r7, #20
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	4805      	ldr	r0, [pc, #20]	; (8000f34 <HAL_UART_MspInit+0x8c>)
 8000f20:	f000 fd5a 	bl	80019d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000f24:	bf00      	nop
 8000f26:	3728      	adds	r7, #40	; 0x28
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	40004800 	.word	0x40004800
 8000f30:	40023800 	.word	0x40023800
 8000f34:	40020c00 	.word	0x40020c00

08000f38 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b08a      	sub	sp, #40	; 0x28
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f40:	f107 0314 	add.w	r3, r7, #20
 8000f44:	2200      	movs	r2, #0
 8000f46:	601a      	str	r2, [r3, #0]
 8000f48:	605a      	str	r2, [r3, #4]
 8000f4a:	609a      	str	r2, [r3, #8]
 8000f4c:	60da      	str	r2, [r3, #12]
 8000f4e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f58:	d13f      	bne.n	8000fda <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	613b      	str	r3, [r7, #16]
 8000f5e:	4b21      	ldr	r3, [pc, #132]	; (8000fe4 <HAL_PCD_MspInit+0xac>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f62:	4a20      	ldr	r2, [pc, #128]	; (8000fe4 <HAL_PCD_MspInit+0xac>)
 8000f64:	f043 0301 	orr.w	r3, r3, #1
 8000f68:	6313      	str	r3, [r2, #48]	; 0x30
 8000f6a:	4b1e      	ldr	r3, [pc, #120]	; (8000fe4 <HAL_PCD_MspInit+0xac>)
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6e:	f003 0301 	and.w	r3, r3, #1
 8000f72:	613b      	str	r3, [r7, #16]
 8000f74:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000f76:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000f7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f7c:	2302      	movs	r3, #2
 8000f7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f80:	2300      	movs	r3, #0
 8000f82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f84:	2303      	movs	r3, #3
 8000f86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000f88:	230a      	movs	r3, #10
 8000f8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f8c:	f107 0314 	add.w	r3, r7, #20
 8000f90:	4619      	mov	r1, r3
 8000f92:	4815      	ldr	r0, [pc, #84]	; (8000fe8 <HAL_PCD_MspInit+0xb0>)
 8000f94:	f000 fd20 	bl	80019d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000f98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000fa6:	f107 0314 	add.w	r3, r7, #20
 8000faa:	4619      	mov	r1, r3
 8000fac:	480e      	ldr	r0, [pc, #56]	; (8000fe8 <HAL_PCD_MspInit+0xb0>)
 8000fae:	f000 fd13 	bl	80019d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000fb2:	4b0c      	ldr	r3, [pc, #48]	; (8000fe4 <HAL_PCD_MspInit+0xac>)
 8000fb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fb6:	4a0b      	ldr	r2, [pc, #44]	; (8000fe4 <HAL_PCD_MspInit+0xac>)
 8000fb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fbc:	6353      	str	r3, [r2, #52]	; 0x34
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	60fb      	str	r3, [r7, #12]
 8000fc2:	4b08      	ldr	r3, [pc, #32]	; (8000fe4 <HAL_PCD_MspInit+0xac>)
 8000fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fc6:	4a07      	ldr	r2, [pc, #28]	; (8000fe4 <HAL_PCD_MspInit+0xac>)
 8000fc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fcc:	6453      	str	r3, [r2, #68]	; 0x44
 8000fce:	4b05      	ldr	r3, [pc, #20]	; (8000fe4 <HAL_PCD_MspInit+0xac>)
 8000fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fd6:	60fb      	str	r3, [r7, #12]
 8000fd8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000fda:	bf00      	nop
 8000fdc:	3728      	adds	r7, #40	; 0x28
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	40023800 	.word	0x40023800
 8000fe8:	40020000 	.word	0x40020000

08000fec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ff0:	e7fe      	b.n	8000ff0 <NMI_Handler+0x4>

08000ff2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ff2:	b480      	push	{r7}
 8000ff4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ff6:	e7fe      	b.n	8000ff6 <HardFault_Handler+0x4>

08000ff8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ffc:	e7fe      	b.n	8000ffc <MemManage_Handler+0x4>

08000ffe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ffe:	b480      	push	{r7}
 8001000:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001002:	e7fe      	b.n	8001002 <BusFault_Handler+0x4>

08001004 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001008:	e7fe      	b.n	8001008 <UsageFault_Handler+0x4>

0800100a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800100a:	b480      	push	{r7}
 800100c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800100e:	bf00      	nop
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr

08001018 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800101c:	bf00      	nop
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr

08001026 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001026:	b480      	push	{r7}
 8001028:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800102a:	bf00      	nop
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr

08001034 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001038:	f000 f890 	bl	800115c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800103c:	bf00      	nop
 800103e:	bd80      	pop	{r7, pc}

08001040 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001044:	4b06      	ldr	r3, [pc, #24]	; (8001060 <SystemInit+0x20>)
 8001046:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800104a:	4a05      	ldr	r2, [pc, #20]	; (8001060 <SystemInit+0x20>)
 800104c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001050:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001054:	bf00      	nop
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	e000ed00 	.word	0xe000ed00

08001064 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001064:	f8df d034 	ldr.w	sp, [pc, #52]	; 800109c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001068:	480d      	ldr	r0, [pc, #52]	; (80010a0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800106a:	490e      	ldr	r1, [pc, #56]	; (80010a4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800106c:	4a0e      	ldr	r2, [pc, #56]	; (80010a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800106e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001070:	e002      	b.n	8001078 <LoopCopyDataInit>

08001072 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001072:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001074:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001076:	3304      	adds	r3, #4

08001078 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001078:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800107a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800107c:	d3f9      	bcc.n	8001072 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800107e:	4a0b      	ldr	r2, [pc, #44]	; (80010ac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001080:	4c0b      	ldr	r4, [pc, #44]	; (80010b0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001082:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001084:	e001      	b.n	800108a <LoopFillZerobss>

08001086 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001086:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001088:	3204      	adds	r2, #4

0800108a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800108a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800108c:	d3fb      	bcc.n	8001086 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800108e:	f7ff ffd7 	bl	8001040 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001092:	f002 f9df 	bl	8003454 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001096:	f7ff fafd 	bl	8000694 <main>
  bx  lr    
 800109a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800109c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80010a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010a4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80010a8:	08003570 	.word	0x08003570
  ldr r2, =_sbss
 80010ac:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80010b0:	200007ac 	.word	0x200007ac

080010b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010b4:	e7fe      	b.n	80010b4 <ADC_IRQHandler>
	...

080010b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010bc:	4b0e      	ldr	r3, [pc, #56]	; (80010f8 <HAL_Init+0x40>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a0d      	ldr	r2, [pc, #52]	; (80010f8 <HAL_Init+0x40>)
 80010c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010c8:	4b0b      	ldr	r3, [pc, #44]	; (80010f8 <HAL_Init+0x40>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a0a      	ldr	r2, [pc, #40]	; (80010f8 <HAL_Init+0x40>)
 80010ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010d4:	4b08      	ldr	r3, [pc, #32]	; (80010f8 <HAL_Init+0x40>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a07      	ldr	r2, [pc, #28]	; (80010f8 <HAL_Init+0x40>)
 80010da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010e0:	2003      	movs	r0, #3
 80010e2:	f000 f931 	bl	8001348 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010e6:	2000      	movs	r0, #0
 80010e8:	f000 f808 	bl	80010fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010ec:	f7ff fdee 	bl	8000ccc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010f0:	2300      	movs	r3, #0
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	40023c00 	.word	0x40023c00

080010fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001104:	4b12      	ldr	r3, [pc, #72]	; (8001150 <HAL_InitTick+0x54>)
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	4b12      	ldr	r3, [pc, #72]	; (8001154 <HAL_InitTick+0x58>)
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	4619      	mov	r1, r3
 800110e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001112:	fbb3 f3f1 	udiv	r3, r3, r1
 8001116:	fbb2 f3f3 	udiv	r3, r2, r3
 800111a:	4618      	mov	r0, r3
 800111c:	f000 f93b 	bl	8001396 <HAL_SYSTICK_Config>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001126:	2301      	movs	r3, #1
 8001128:	e00e      	b.n	8001148 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2b0f      	cmp	r3, #15
 800112e:	d80a      	bhi.n	8001146 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001130:	2200      	movs	r2, #0
 8001132:	6879      	ldr	r1, [r7, #4]
 8001134:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001138:	f000 f911 	bl	800135e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800113c:	4a06      	ldr	r2, [pc, #24]	; (8001158 <HAL_InitTick+0x5c>)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001142:	2300      	movs	r3, #0
 8001144:	e000      	b.n	8001148 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001146:	2301      	movs	r3, #1
}
 8001148:	4618      	mov	r0, r3
 800114a:	3708      	adds	r7, #8
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	20000000 	.word	0x20000000
 8001154:	20000008 	.word	0x20000008
 8001158:	20000004 	.word	0x20000004

0800115c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001160:	4b06      	ldr	r3, [pc, #24]	; (800117c <HAL_IncTick+0x20>)
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	461a      	mov	r2, r3
 8001166:	4b06      	ldr	r3, [pc, #24]	; (8001180 <HAL_IncTick+0x24>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4413      	add	r3, r2
 800116c:	4a04      	ldr	r2, [pc, #16]	; (8001180 <HAL_IncTick+0x24>)
 800116e:	6013      	str	r3, [r2, #0]
}
 8001170:	bf00      	nop
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	20000008 	.word	0x20000008
 8001180:	200007a8 	.word	0x200007a8

08001184 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  return uwTick;
 8001188:	4b03      	ldr	r3, [pc, #12]	; (8001198 <HAL_GetTick+0x14>)
 800118a:	681b      	ldr	r3, [r3, #0]
}
 800118c:	4618      	mov	r0, r3
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	200007a8 	.word	0x200007a8

0800119c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011a4:	f7ff ffee 	bl	8001184 <HAL_GetTick>
 80011a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80011b4:	d005      	beq.n	80011c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011b6:	4b0a      	ldr	r3, [pc, #40]	; (80011e0 <HAL_Delay+0x44>)
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	461a      	mov	r2, r3
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	4413      	add	r3, r2
 80011c0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011c2:	bf00      	nop
 80011c4:	f7ff ffde 	bl	8001184 <HAL_GetTick>
 80011c8:	4602      	mov	r2, r0
 80011ca:	68bb      	ldr	r3, [r7, #8]
 80011cc:	1ad3      	subs	r3, r2, r3
 80011ce:	68fa      	ldr	r2, [r7, #12]
 80011d0:	429a      	cmp	r2, r3
 80011d2:	d8f7      	bhi.n	80011c4 <HAL_Delay+0x28>
  {
  }
}
 80011d4:	bf00      	nop
 80011d6:	bf00      	nop
 80011d8:	3710      	adds	r7, #16
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	20000008 	.word	0x20000008

080011e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b085      	sub	sp, #20
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	f003 0307 	and.w	r3, r3, #7
 80011f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011f4:	4b0c      	ldr	r3, [pc, #48]	; (8001228 <__NVIC_SetPriorityGrouping+0x44>)
 80011f6:	68db      	ldr	r3, [r3, #12]
 80011f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011fa:	68ba      	ldr	r2, [r7, #8]
 80011fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001200:	4013      	ands	r3, r2
 8001202:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001208:	68bb      	ldr	r3, [r7, #8]
 800120a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800120c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001210:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001214:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001216:	4a04      	ldr	r2, [pc, #16]	; (8001228 <__NVIC_SetPriorityGrouping+0x44>)
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	60d3      	str	r3, [r2, #12]
}
 800121c:	bf00      	nop
 800121e:	3714      	adds	r7, #20
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr
 8001228:	e000ed00 	.word	0xe000ed00

0800122c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001230:	4b04      	ldr	r3, [pc, #16]	; (8001244 <__NVIC_GetPriorityGrouping+0x18>)
 8001232:	68db      	ldr	r3, [r3, #12]
 8001234:	0a1b      	lsrs	r3, r3, #8
 8001236:	f003 0307 	and.w	r3, r3, #7
}
 800123a:	4618      	mov	r0, r3
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr
 8001244:	e000ed00 	.word	0xe000ed00

08001248 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
 800124e:	4603      	mov	r3, r0
 8001250:	6039      	str	r1, [r7, #0]
 8001252:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001254:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001258:	2b00      	cmp	r3, #0
 800125a:	db0a      	blt.n	8001272 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	b2da      	uxtb	r2, r3
 8001260:	490c      	ldr	r1, [pc, #48]	; (8001294 <__NVIC_SetPriority+0x4c>)
 8001262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001266:	0112      	lsls	r2, r2, #4
 8001268:	b2d2      	uxtb	r2, r2
 800126a:	440b      	add	r3, r1
 800126c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001270:	e00a      	b.n	8001288 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	b2da      	uxtb	r2, r3
 8001276:	4908      	ldr	r1, [pc, #32]	; (8001298 <__NVIC_SetPriority+0x50>)
 8001278:	79fb      	ldrb	r3, [r7, #7]
 800127a:	f003 030f 	and.w	r3, r3, #15
 800127e:	3b04      	subs	r3, #4
 8001280:	0112      	lsls	r2, r2, #4
 8001282:	b2d2      	uxtb	r2, r2
 8001284:	440b      	add	r3, r1
 8001286:	761a      	strb	r2, [r3, #24]
}
 8001288:	bf00      	nop
 800128a:	370c      	adds	r7, #12
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr
 8001294:	e000e100 	.word	0xe000e100
 8001298:	e000ed00 	.word	0xe000ed00

0800129c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800129c:	b480      	push	{r7}
 800129e:	b089      	sub	sp, #36	; 0x24
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	60f8      	str	r0, [r7, #12]
 80012a4:	60b9      	str	r1, [r7, #8]
 80012a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	f003 0307 	and.w	r3, r3, #7
 80012ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	f1c3 0307 	rsb	r3, r3, #7
 80012b6:	2b04      	cmp	r3, #4
 80012b8:	bf28      	it	cs
 80012ba:	2304      	movcs	r3, #4
 80012bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	3304      	adds	r3, #4
 80012c2:	2b06      	cmp	r3, #6
 80012c4:	d902      	bls.n	80012cc <NVIC_EncodePriority+0x30>
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	3b03      	subs	r3, #3
 80012ca:	e000      	b.n	80012ce <NVIC_EncodePriority+0x32>
 80012cc:	2300      	movs	r3, #0
 80012ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80012d4:	69bb      	ldr	r3, [r7, #24]
 80012d6:	fa02 f303 	lsl.w	r3, r2, r3
 80012da:	43da      	mvns	r2, r3
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	401a      	ands	r2, r3
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012e4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	fa01 f303 	lsl.w	r3, r1, r3
 80012ee:	43d9      	mvns	r1, r3
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012f4:	4313      	orrs	r3, r2
         );
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3724      	adds	r7, #36	; 0x24
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
	...

08001304 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	3b01      	subs	r3, #1
 8001310:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001314:	d301      	bcc.n	800131a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001316:	2301      	movs	r3, #1
 8001318:	e00f      	b.n	800133a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800131a:	4a0a      	ldr	r2, [pc, #40]	; (8001344 <SysTick_Config+0x40>)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	3b01      	subs	r3, #1
 8001320:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001322:	210f      	movs	r1, #15
 8001324:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001328:	f7ff ff8e 	bl	8001248 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800132c:	4b05      	ldr	r3, [pc, #20]	; (8001344 <SysTick_Config+0x40>)
 800132e:	2200      	movs	r2, #0
 8001330:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001332:	4b04      	ldr	r3, [pc, #16]	; (8001344 <SysTick_Config+0x40>)
 8001334:	2207      	movs	r2, #7
 8001336:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001338:	2300      	movs	r3, #0
}
 800133a:	4618      	mov	r0, r3
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	e000e010 	.word	0xe000e010

08001348 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001350:	6878      	ldr	r0, [r7, #4]
 8001352:	f7ff ff47 	bl	80011e4 <__NVIC_SetPriorityGrouping>
}
 8001356:	bf00      	nop
 8001358:	3708      	adds	r7, #8
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}

0800135e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800135e:	b580      	push	{r7, lr}
 8001360:	b086      	sub	sp, #24
 8001362:	af00      	add	r7, sp, #0
 8001364:	4603      	mov	r3, r0
 8001366:	60b9      	str	r1, [r7, #8]
 8001368:	607a      	str	r2, [r7, #4]
 800136a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800136c:	2300      	movs	r3, #0
 800136e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001370:	f7ff ff5c 	bl	800122c <__NVIC_GetPriorityGrouping>
 8001374:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001376:	687a      	ldr	r2, [r7, #4]
 8001378:	68b9      	ldr	r1, [r7, #8]
 800137a:	6978      	ldr	r0, [r7, #20]
 800137c:	f7ff ff8e 	bl	800129c <NVIC_EncodePriority>
 8001380:	4602      	mov	r2, r0
 8001382:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001386:	4611      	mov	r1, r2
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff ff5d 	bl	8001248 <__NVIC_SetPriority>
}
 800138e:	bf00      	nop
 8001390:	3718      	adds	r7, #24
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}

08001396 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001396:	b580      	push	{r7, lr}
 8001398:	b082      	sub	sp, #8
 800139a:	af00      	add	r7, sp, #0
 800139c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800139e:	6878      	ldr	r0, [r7, #4]
 80013a0:	f7ff ffb0 	bl	8001304 <SysTick_Config>
 80013a4:	4603      	mov	r3, r0
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3708      	adds	r7, #8
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
	...

080013b0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b084      	sub	sp, #16
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d101      	bne.n	80013c2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80013be:	2301      	movs	r3, #1
 80013c0:	e06c      	b.n	800149c <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d106      	bne.n	80013da <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2223      	movs	r2, #35	; 0x23
 80013d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80013d4:	6878      	ldr	r0, [r7, #4]
 80013d6:	f7ff fca1 	bl	8000d1c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013da:	2300      	movs	r3, #0
 80013dc:	60bb      	str	r3, [r7, #8]
 80013de:	4b31      	ldr	r3, [pc, #196]	; (80014a4 <HAL_ETH_Init+0xf4>)
 80013e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e2:	4a30      	ldr	r2, [pc, #192]	; (80014a4 <HAL_ETH_Init+0xf4>)
 80013e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013e8:	6453      	str	r3, [r2, #68]	; 0x44
 80013ea:	4b2e      	ldr	r3, [pc, #184]	; (80014a4 <HAL_ETH_Init+0xf4>)
 80013ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013f2:	60bb      	str	r3, [r7, #8]
 80013f4:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80013f6:	4b2c      	ldr	r3, [pc, #176]	; (80014a8 <HAL_ETH_Init+0xf8>)
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	4a2b      	ldr	r2, [pc, #172]	; (80014a8 <HAL_ETH_Init+0xf8>)
 80013fc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001400:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001402:	4b29      	ldr	r3, [pc, #164]	; (80014a8 <HAL_ETH_Init+0xf8>)
 8001404:	685a      	ldr	r2, [r3, #4]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	689b      	ldr	r3, [r3, #8]
 800140a:	4927      	ldr	r1, [pc, #156]	; (80014a8 <HAL_ETH_Init+0xf8>)
 800140c:	4313      	orrs	r3, r2
 800140e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001410:	4b25      	ldr	r3, [pc, #148]	; (80014a8 <HAL_ETH_Init+0xf8>)
 8001412:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	687a      	ldr	r2, [r7, #4]
 8001420:	6812      	ldr	r2, [r2, #0]
 8001422:	f043 0301 	orr.w	r3, r3, #1
 8001426:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800142a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800142c:	f7ff feaa 	bl	8001184 <HAL_GetTick>
 8001430:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001432:	e011      	b.n	8001458 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001434:	f7ff fea6 	bl	8001184 <HAL_GetTick>
 8001438:	4602      	mov	r2, r0
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001442:	d909      	bls.n	8001458 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2204      	movs	r2, #4
 8001448:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	22e0      	movs	r2, #224	; 0xe0
 8001450:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001454:	2301      	movs	r3, #1
 8001456:	e021      	b.n	800149c <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f003 0301 	and.w	r3, r3, #1
 8001466:	2b00      	cmp	r3, #0
 8001468:	d1e4      	bne.n	8001434 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800146a:	6878      	ldr	r0, [r7, #4]
 800146c:	f000 f944 	bl	80016f8 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001470:	6878      	ldr	r0, [r7, #4]
 8001472:	f000 f9eb 	bl	800184c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001476:	6878      	ldr	r0, [r7, #4]
 8001478:	f000 fa41 	bl	80018fe <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	461a      	mov	r2, r3
 8001482:	2100      	movs	r1, #0
 8001484:	6878      	ldr	r0, [r7, #4]
 8001486:	f000 f9a9 	bl	80017dc <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2200      	movs	r2, #0
 800148e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2210      	movs	r2, #16
 8001496:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800149a:	2300      	movs	r3, #0
}
 800149c:	4618      	mov	r0, r3
 800149e:	3710      	adds	r7, #16
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	40023800 	.word	0x40023800
 80014a8:	40013800 	.word	0x40013800

080014ac <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b084      	sub	sp, #16
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
 80014b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80014be:	68fa      	ldr	r2, [r7, #12]
 80014c0:	4b47      	ldr	r3, [pc, #284]	; (80015e0 <ETH_SetMACConfig+0x134>)
 80014c2:	4013      	ands	r3, r2
 80014c4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	7c1b      	ldrb	r3, [r3, #16]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d102      	bne.n	80014d4 <ETH_SetMACConfig+0x28>
 80014ce:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80014d2:	e000      	b.n	80014d6 <ETH_SetMACConfig+0x2a>
 80014d4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	7c5b      	ldrb	r3, [r3, #17]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d102      	bne.n	80014e4 <ETH_SetMACConfig+0x38>
 80014de:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80014e2:	e000      	b.n	80014e6 <ETH_SetMACConfig+0x3a>
 80014e4:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80014e6:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80014ec:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	7fdb      	ldrb	r3, [r3, #31]
 80014f2:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80014f4:	431a      	orrs	r2, r3
                        macconf->Speed |
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80014fa:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80014fc:	683a      	ldr	r2, [r7, #0]
 80014fe:	7f92      	ldrb	r2, [r2, #30]
 8001500:	2a00      	cmp	r2, #0
 8001502:	d102      	bne.n	800150a <ETH_SetMACConfig+0x5e>
 8001504:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001508:	e000      	b.n	800150c <ETH_SetMACConfig+0x60>
 800150a:	2200      	movs	r2, #0
                        macconf->Speed |
 800150c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	7f1b      	ldrb	r3, [r3, #28]
 8001512:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001514:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800151a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	791b      	ldrb	r3, [r3, #4]
 8001520:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001522:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001524:	683a      	ldr	r2, [r7, #0]
 8001526:	f892 2020 	ldrb.w	r2, [r2, #32]
 800152a:	2a00      	cmp	r2, #0
 800152c:	d102      	bne.n	8001534 <ETH_SetMACConfig+0x88>
 800152e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001532:	e000      	b.n	8001536 <ETH_SetMACConfig+0x8a>
 8001534:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001536:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	7bdb      	ldrb	r3, [r3, #15]
 800153c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800153e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001544:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800154c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800154e:	4313      	orrs	r3, r2
 8001550:	68fa      	ldr	r2, [r7, #12]
 8001552:	4313      	orrs	r3, r2
 8001554:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	68fa      	ldr	r2, [r7, #12]
 800155c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001566:	2001      	movs	r0, #1
 8001568:	f7ff fe18 	bl	800119c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	68fa      	ldr	r2, [r7, #12]
 8001572:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	699b      	ldr	r3, [r3, #24]
 800157a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800157c:	68fa      	ldr	r2, [r7, #12]
 800157e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001582:	4013      	ands	r3, r2
 8001584:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800158a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->ZeroQuantaPause |
 800158c:	683a      	ldr	r2, [r7, #0]
 800158e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001592:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        (uint32_t)macconf->ZeroQuantaPause |
 8001598:	4313      	orrs	r3, r2
                        (uint32_t)macconf->UnicastSlowProtocolPacketDetect |
 800159a:	683a      	ldr	r2, [r7, #0]
 800159c:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
                        macconf->PauseLowThreshold |
 80015a0:	4313      	orrs	r3, r2
                        (uint32_t)macconf->ReceiveFlowControl |
 80015a2:	683a      	ldr	r2, [r7, #0]
 80015a4:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
                        (uint32_t)macconf->UnicastSlowProtocolPacketDetect |
 80015a8:	4313      	orrs	r3, r2
                        (uint32_t)macconf->TransmitFlowControl);
 80015aa:	683a      	ldr	r2, [r7, #0]
 80015ac:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80015b0:	4313      	orrs	r3, r2
 80015b2:	68fa      	ldr	r2, [r7, #12]
 80015b4:	4313      	orrs	r3, r2
 80015b6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	68fa      	ldr	r2, [r7, #12]
 80015be:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	699b      	ldr	r3, [r3, #24]
 80015c6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80015c8:	2001      	movs	r0, #1
 80015ca:	f7ff fde7 	bl	800119c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	68fa      	ldr	r2, [r7, #12]
 80015d4:	619a      	str	r2, [r3, #24]
}
 80015d6:	bf00      	nop
 80015d8:	3710      	adds	r7, #16
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	ff20810f 	.word	0xff20810f

080015e4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b084      	sub	sp, #16
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
 80015ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015f6:	699b      	ldr	r3, [r3, #24]
 80015f8:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80015fa:	68fa      	ldr	r2, [r7, #12]
 80015fc:	4b3d      	ldr	r3, [pc, #244]	; (80016f4 <ETH_SetDMAConfig+0x110>)
 80015fe:	4013      	ands	r3, r2
 8001600:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	7b1b      	ldrb	r3, [r3, #12]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d102      	bne.n	8001610 <ETH_SetDMAConfig+0x2c>
 800160a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800160e:	e000      	b.n	8001612 <ETH_SetDMAConfig+0x2e>
 8001610:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	7b5b      	ldrb	r3, [r3, #13]
 8001616:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001618:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800161a:	683a      	ldr	r2, [r7, #0]
 800161c:	7f52      	ldrb	r2, [r2, #29]
 800161e:	2a00      	cmp	r2, #0
 8001620:	d102      	bne.n	8001628 <ETH_SetDMAConfig+0x44>
 8001622:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001626:	e000      	b.n	800162a <ETH_SetDMAConfig+0x46>
 8001628:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800162a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	7b9b      	ldrb	r3, [r3, #14]
 8001630:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001632:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001638:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	7f1b      	ldrb	r3, [r3, #28]
 800163e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001640:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	7f9b      	ldrb	r3, [r3, #30]
 8001646:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001648:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800164e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001656:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001658:	4313      	orrs	r3, r2
 800165a:	68fa      	ldr	r2, [r7, #12]
 800165c:	4313      	orrs	r3, r2
 800165e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001668:	461a      	mov	r2, r3
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001676:	699b      	ldr	r3, [r3, #24]
 8001678:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800167a:	2001      	movs	r0, #1
 800167c:	f7ff fd8e 	bl	800119c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001688:	461a      	mov	r2, r3
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	791b      	ldrb	r3, [r3, #4]
 8001692:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001698:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800169e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80016a4:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80016ac:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80016ae:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016b4:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80016b6:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80016bc:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80016be:	687a      	ldr	r2, [r7, #4]
 80016c0:	6812      	ldr	r2, [r2, #0]
 80016c2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80016c6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80016ca:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80016d8:	2001      	movs	r0, #1
 80016da:	f7ff fd5f 	bl	800119c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016e6:	461a      	mov	r2, r3
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	6013      	str	r3, [r2, #0]
}
 80016ec:	bf00      	nop
 80016ee:	3710      	adds	r7, #16
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	f8de3f23 	.word	0xf8de3f23

080016f8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b0a6      	sub	sp, #152	; 0x98
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001700:	2301      	movs	r3, #1
 8001702:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8001706:	2301      	movs	r3, #1
 8001708:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 800170c:	2300      	movs	r3, #0
 800170e:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001710:	2300      	movs	r3, #0
 8001712:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001716:	2301      	movs	r3, #1
 8001718:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 800171c:	2300      	movs	r3, #0
 800171e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8001722:	2301      	movs	r3, #1
 8001724:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001728:	2300      	movs	r3, #0
 800172a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800172e:	2300      	movs	r3, #0
 8001730:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001734:	2300      	movs	r3, #0
 8001736:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001738:	2300      	movs	r3, #0
 800173a:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800173e:	2300      	movs	r3, #0
 8001740:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001742:	2300      	movs	r3, #0
 8001744:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001748:	2300      	movs	r3, #0
 800174a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800174e:	2300      	movs	r3, #0
 8001750:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001754:	2300      	movs	r3, #0
 8001756:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800175a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800175e:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001760:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001764:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001766:	2300      	movs	r3, #0
 8001768:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800176c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001770:	4619      	mov	r1, r3
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	f7ff fe9a 	bl	80014ac <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001778:	2301      	movs	r3, #1
 800177a:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800177c:	2301      	movs	r3, #1
 800177e:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001780:	2301      	movs	r3, #1
 8001782:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001786:	2301      	movs	r3, #1
 8001788:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800178a:	2300      	movs	r3, #0
 800178c:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800178e:	2300      	movs	r3, #0
 8001790:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001794:	2300      	movs	r3, #0
 8001796:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800179a:	2300      	movs	r3, #0
 800179c:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800179e:	2301      	movs	r3, #1
 80017a0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80017a4:	2301      	movs	r3, #1
 80017a6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80017a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017ac:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80017ae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80017b2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80017b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017b8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80017ba:	2301      	movs	r3, #1
 80017bc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80017c0:	2300      	movs	r3, #0
 80017c2:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80017c4:	2300      	movs	r3, #0
 80017c6:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80017c8:	f107 0308 	add.w	r3, r7, #8
 80017cc:	4619      	mov	r1, r3
 80017ce:	6878      	ldr	r0, [r7, #4]
 80017d0:	f7ff ff08 	bl	80015e4 <ETH_SetDMAConfig>
}
 80017d4:	bf00      	nop
 80017d6:	3798      	adds	r7, #152	; 0x98
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}

080017dc <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80017dc:	b480      	push	{r7}
 80017de:	b087      	sub	sp, #28
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	60f8      	str	r0, [r7, #12]
 80017e4:	60b9      	str	r1, [r7, #8]
 80017e6:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	3305      	adds	r3, #5
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	021b      	lsls	r3, r3, #8
 80017f0:	687a      	ldr	r2, [r7, #4]
 80017f2:	3204      	adds	r2, #4
 80017f4:	7812      	ldrb	r2, [r2, #0]
 80017f6:	4313      	orrs	r3, r2
 80017f8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80017fa:	68ba      	ldr	r2, [r7, #8]
 80017fc:	4b11      	ldr	r3, [pc, #68]	; (8001844 <ETH_MACAddressConfig+0x68>)
 80017fe:	4413      	add	r3, r2
 8001800:	461a      	mov	r2, r3
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	3303      	adds	r3, #3
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	061a      	lsls	r2, r3, #24
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	3302      	adds	r3, #2
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	041b      	lsls	r3, r3, #16
 8001816:	431a      	orrs	r2, r3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	3301      	adds	r3, #1
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	021b      	lsls	r3, r3, #8
 8001820:	4313      	orrs	r3, r2
 8001822:	687a      	ldr	r2, [r7, #4]
 8001824:	7812      	ldrb	r2, [r2, #0]
 8001826:	4313      	orrs	r3, r2
 8001828:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800182a:	68ba      	ldr	r2, [r7, #8]
 800182c:	4b06      	ldr	r3, [pc, #24]	; (8001848 <ETH_MACAddressConfig+0x6c>)
 800182e:	4413      	add	r3, r2
 8001830:	461a      	mov	r2, r3
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	6013      	str	r3, [r2, #0]
}
 8001836:	bf00      	nop
 8001838:	371c      	adds	r7, #28
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	40028040 	.word	0x40028040
 8001848:	40028044 	.word	0x40028044

0800184c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800184c:	b480      	push	{r7}
 800184e:	b085      	sub	sp, #20
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001854:	2300      	movs	r3, #0
 8001856:	60fb      	str	r3, [r7, #12]
 8001858:	e03e      	b.n	80018d8 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	68d9      	ldr	r1, [r3, #12]
 800185e:	68fa      	ldr	r2, [r7, #12]
 8001860:	4613      	mov	r3, r2
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	4413      	add	r3, r2
 8001866:	00db      	lsls	r3, r3, #3
 8001868:	440b      	add	r3, r1
 800186a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	2200      	movs	r2, #0
 8001870:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001872:	68bb      	ldr	r3, [r7, #8]
 8001874:	2200      	movs	r2, #0
 8001876:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	2200      	movs	r2, #0
 800187c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	2200      	movs	r2, #0
 8001882:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001884:	68b9      	ldr	r1, [r7, #8]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	68fa      	ldr	r2, [r7, #12]
 800188a:	3206      	adds	r2, #6
 800188c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	2b02      	cmp	r3, #2
 80018a0:	d80c      	bhi.n	80018bc <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	68d9      	ldr	r1, [r3, #12]
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	1c5a      	adds	r2, r3, #1
 80018aa:	4613      	mov	r3, r2
 80018ac:	009b      	lsls	r3, r3, #2
 80018ae:	4413      	add	r3, r2
 80018b0:	00db      	lsls	r3, r3, #3
 80018b2:	440b      	add	r3, r1
 80018b4:	461a      	mov	r2, r3
 80018b6:	68bb      	ldr	r3, [r7, #8]
 80018b8:	60da      	str	r2, [r3, #12]
 80018ba:	e004      	b.n	80018c6 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	461a      	mov	r2, r3
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80018c6:	68bb      	ldr	r3, [r7, #8]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80018ce:	68bb      	ldr	r3, [r7, #8]
 80018d0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	3301      	adds	r3, #1
 80018d6:	60fb      	str	r3, [r7, #12]
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	2b03      	cmp	r3, #3
 80018dc:	d9bd      	bls.n	800185a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2200      	movs	r2, #0
 80018e2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	68da      	ldr	r2, [r3, #12]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018f0:	611a      	str	r2, [r3, #16]
}
 80018f2:	bf00      	nop
 80018f4:	3714      	adds	r7, #20
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr

080018fe <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80018fe:	b480      	push	{r7}
 8001900:	b085      	sub	sp, #20
 8001902:	af00      	add	r7, sp, #0
 8001904:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001906:	2300      	movs	r3, #0
 8001908:	60fb      	str	r3, [r7, #12]
 800190a:	e046      	b.n	800199a <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6919      	ldr	r1, [r3, #16]
 8001910:	68fa      	ldr	r2, [r7, #12]
 8001912:	4613      	mov	r3, r2
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	4413      	add	r3, r2
 8001918:	00db      	lsls	r3, r3, #3
 800191a:	440b      	add	r3, r1
 800191c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800191e:	68bb      	ldr	r3, [r7, #8]
 8001920:	2200      	movs	r2, #0
 8001922:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	2200      	movs	r2, #0
 8001928:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800192a:	68bb      	ldr	r3, [r7, #8]
 800192c:	2200      	movs	r2, #0
 800192e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	2200      	movs	r2, #0
 8001934:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	2200      	movs	r2, #0
 800193a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	2200      	movs	r2, #0
 8001940:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001942:	68bb      	ldr	r3, [r7, #8]
 8001944:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001948:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8001950:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001952:	68bb      	ldr	r3, [r7, #8]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800195a:	68bb      	ldr	r3, [r7, #8]
 800195c:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800195e:	68b9      	ldr	r1, [r7, #8]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	68fa      	ldr	r2, [r7, #12]
 8001964:	3212      	adds	r2, #18
 8001966:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	2b02      	cmp	r3, #2
 800196e:	d80c      	bhi.n	800198a <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6919      	ldr	r1, [r3, #16]
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	1c5a      	adds	r2, r3, #1
 8001978:	4613      	mov	r3, r2
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	4413      	add	r3, r2
 800197e:	00db      	lsls	r3, r3, #3
 8001980:	440b      	add	r3, r1
 8001982:	461a      	mov	r2, r3
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	60da      	str	r2, [r3, #12]
 8001988:	e004      	b.n	8001994 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	691b      	ldr	r3, [r3, #16]
 800198e:	461a      	mov	r2, r3
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	3301      	adds	r3, #1
 8001998:	60fb      	str	r3, [r7, #12]
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	2b03      	cmp	r3, #3
 800199e:	d9b5      	bls.n	800190c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2200      	movs	r2, #0
 80019a4:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2200      	movs	r2, #0
 80019aa:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2200      	movs	r2, #0
 80019b0:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2200      	movs	r2, #0
 80019b6:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2200      	movs	r2, #0
 80019bc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	691a      	ldr	r2, [r3, #16]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019ca:	60da      	str	r2, [r3, #12]
}
 80019cc:	bf00      	nop
 80019ce:	3714      	adds	r7, #20
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr

080019d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019d8:	b480      	push	{r7}
 80019da:	b089      	sub	sp, #36	; 0x24
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
 80019e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019e2:	2300      	movs	r3, #0
 80019e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019e6:	2300      	movs	r3, #0
 80019e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019ea:	2300      	movs	r3, #0
 80019ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019ee:	2300      	movs	r3, #0
 80019f0:	61fb      	str	r3, [r7, #28]
 80019f2:	e177      	b.n	8001ce4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019f4:	2201      	movs	r2, #1
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	fa02 f303 	lsl.w	r3, r2, r3
 80019fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	697a      	ldr	r2, [r7, #20]
 8001a04:	4013      	ands	r3, r2
 8001a06:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a08:	693a      	ldr	r2, [r7, #16]
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	f040 8166 	bne.w	8001cde <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	f003 0303 	and.w	r3, r3, #3
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d005      	beq.n	8001a2a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	d130      	bne.n	8001a8c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a30:	69fb      	ldr	r3, [r7, #28]
 8001a32:	005b      	lsls	r3, r3, #1
 8001a34:	2203      	movs	r2, #3
 8001a36:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3a:	43db      	mvns	r3, r3
 8001a3c:	69ba      	ldr	r2, [r7, #24]
 8001a3e:	4013      	ands	r3, r2
 8001a40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	68da      	ldr	r2, [r3, #12]
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	005b      	lsls	r3, r3, #1
 8001a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4e:	69ba      	ldr	r2, [r7, #24]
 8001a50:	4313      	orrs	r3, r2
 8001a52:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	69ba      	ldr	r2, [r7, #24]
 8001a58:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a60:	2201      	movs	r2, #1
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	fa02 f303 	lsl.w	r3, r2, r3
 8001a68:	43db      	mvns	r3, r3
 8001a6a:	69ba      	ldr	r2, [r7, #24]
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	091b      	lsrs	r3, r3, #4
 8001a76:	f003 0201 	and.w	r2, r3, #1
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a80:	69ba      	ldr	r2, [r7, #24]
 8001a82:	4313      	orrs	r3, r2
 8001a84:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	69ba      	ldr	r2, [r7, #24]
 8001a8a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f003 0303 	and.w	r3, r3, #3
 8001a94:	2b03      	cmp	r3, #3
 8001a96:	d017      	beq.n	8001ac8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	005b      	lsls	r3, r3, #1
 8001aa2:	2203      	movs	r2, #3
 8001aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa8:	43db      	mvns	r3, r3
 8001aaa:	69ba      	ldr	r2, [r7, #24]
 8001aac:	4013      	ands	r3, r2
 8001aae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	689a      	ldr	r2, [r3, #8]
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	005b      	lsls	r3, r3, #1
 8001ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8001abc:	69ba      	ldr	r2, [r7, #24]
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f003 0303 	and.w	r3, r3, #3
 8001ad0:	2b02      	cmp	r3, #2
 8001ad2:	d123      	bne.n	8001b1c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	08da      	lsrs	r2, r3, #3
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	3208      	adds	r2, #8
 8001adc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ae0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	f003 0307 	and.w	r3, r3, #7
 8001ae8:	009b      	lsls	r3, r3, #2
 8001aea:	220f      	movs	r2, #15
 8001aec:	fa02 f303 	lsl.w	r3, r2, r3
 8001af0:	43db      	mvns	r3, r3
 8001af2:	69ba      	ldr	r2, [r7, #24]
 8001af4:	4013      	ands	r3, r2
 8001af6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	691a      	ldr	r2, [r3, #16]
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	f003 0307 	and.w	r3, r3, #7
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	fa02 f303 	lsl.w	r3, r2, r3
 8001b08:	69ba      	ldr	r2, [r7, #24]
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	08da      	lsrs	r2, r3, #3
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	3208      	adds	r2, #8
 8001b16:	69b9      	ldr	r1, [r7, #24]
 8001b18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	005b      	lsls	r3, r3, #1
 8001b26:	2203      	movs	r2, #3
 8001b28:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2c:	43db      	mvns	r3, r3
 8001b2e:	69ba      	ldr	r2, [r7, #24]
 8001b30:	4013      	ands	r3, r2
 8001b32:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f003 0203 	and.w	r2, r3, #3
 8001b3c:	69fb      	ldr	r3, [r7, #28]
 8001b3e:	005b      	lsls	r3, r3, #1
 8001b40:	fa02 f303 	lsl.w	r3, r2, r3
 8001b44:	69ba      	ldr	r2, [r7, #24]
 8001b46:	4313      	orrs	r3, r2
 8001b48:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	69ba      	ldr	r2, [r7, #24]
 8001b4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	f000 80c0 	beq.w	8001cde <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b5e:	2300      	movs	r3, #0
 8001b60:	60fb      	str	r3, [r7, #12]
 8001b62:	4b66      	ldr	r3, [pc, #408]	; (8001cfc <HAL_GPIO_Init+0x324>)
 8001b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b66:	4a65      	ldr	r2, [pc, #404]	; (8001cfc <HAL_GPIO_Init+0x324>)
 8001b68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b6c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b6e:	4b63      	ldr	r3, [pc, #396]	; (8001cfc <HAL_GPIO_Init+0x324>)
 8001b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b76:	60fb      	str	r3, [r7, #12]
 8001b78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b7a:	4a61      	ldr	r2, [pc, #388]	; (8001d00 <HAL_GPIO_Init+0x328>)
 8001b7c:	69fb      	ldr	r3, [r7, #28]
 8001b7e:	089b      	lsrs	r3, r3, #2
 8001b80:	3302      	adds	r3, #2
 8001b82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	f003 0303 	and.w	r3, r3, #3
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	220f      	movs	r2, #15
 8001b92:	fa02 f303 	lsl.w	r3, r2, r3
 8001b96:	43db      	mvns	r3, r3
 8001b98:	69ba      	ldr	r2, [r7, #24]
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4a58      	ldr	r2, [pc, #352]	; (8001d04 <HAL_GPIO_Init+0x32c>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d037      	beq.n	8001c16 <HAL_GPIO_Init+0x23e>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4a57      	ldr	r2, [pc, #348]	; (8001d08 <HAL_GPIO_Init+0x330>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d031      	beq.n	8001c12 <HAL_GPIO_Init+0x23a>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4a56      	ldr	r2, [pc, #344]	; (8001d0c <HAL_GPIO_Init+0x334>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d02b      	beq.n	8001c0e <HAL_GPIO_Init+0x236>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4a55      	ldr	r2, [pc, #340]	; (8001d10 <HAL_GPIO_Init+0x338>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d025      	beq.n	8001c0a <HAL_GPIO_Init+0x232>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4a54      	ldr	r2, [pc, #336]	; (8001d14 <HAL_GPIO_Init+0x33c>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d01f      	beq.n	8001c06 <HAL_GPIO_Init+0x22e>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4a53      	ldr	r2, [pc, #332]	; (8001d18 <HAL_GPIO_Init+0x340>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d019      	beq.n	8001c02 <HAL_GPIO_Init+0x22a>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4a52      	ldr	r2, [pc, #328]	; (8001d1c <HAL_GPIO_Init+0x344>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d013      	beq.n	8001bfe <HAL_GPIO_Init+0x226>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4a51      	ldr	r2, [pc, #324]	; (8001d20 <HAL_GPIO_Init+0x348>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d00d      	beq.n	8001bfa <HAL_GPIO_Init+0x222>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4a50      	ldr	r2, [pc, #320]	; (8001d24 <HAL_GPIO_Init+0x34c>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d007      	beq.n	8001bf6 <HAL_GPIO_Init+0x21e>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4a4f      	ldr	r2, [pc, #316]	; (8001d28 <HAL_GPIO_Init+0x350>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d101      	bne.n	8001bf2 <HAL_GPIO_Init+0x21a>
 8001bee:	2309      	movs	r3, #9
 8001bf0:	e012      	b.n	8001c18 <HAL_GPIO_Init+0x240>
 8001bf2:	230a      	movs	r3, #10
 8001bf4:	e010      	b.n	8001c18 <HAL_GPIO_Init+0x240>
 8001bf6:	2308      	movs	r3, #8
 8001bf8:	e00e      	b.n	8001c18 <HAL_GPIO_Init+0x240>
 8001bfa:	2307      	movs	r3, #7
 8001bfc:	e00c      	b.n	8001c18 <HAL_GPIO_Init+0x240>
 8001bfe:	2306      	movs	r3, #6
 8001c00:	e00a      	b.n	8001c18 <HAL_GPIO_Init+0x240>
 8001c02:	2305      	movs	r3, #5
 8001c04:	e008      	b.n	8001c18 <HAL_GPIO_Init+0x240>
 8001c06:	2304      	movs	r3, #4
 8001c08:	e006      	b.n	8001c18 <HAL_GPIO_Init+0x240>
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e004      	b.n	8001c18 <HAL_GPIO_Init+0x240>
 8001c0e:	2302      	movs	r3, #2
 8001c10:	e002      	b.n	8001c18 <HAL_GPIO_Init+0x240>
 8001c12:	2301      	movs	r3, #1
 8001c14:	e000      	b.n	8001c18 <HAL_GPIO_Init+0x240>
 8001c16:	2300      	movs	r3, #0
 8001c18:	69fa      	ldr	r2, [r7, #28]
 8001c1a:	f002 0203 	and.w	r2, r2, #3
 8001c1e:	0092      	lsls	r2, r2, #2
 8001c20:	4093      	lsls	r3, r2
 8001c22:	69ba      	ldr	r2, [r7, #24]
 8001c24:	4313      	orrs	r3, r2
 8001c26:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c28:	4935      	ldr	r1, [pc, #212]	; (8001d00 <HAL_GPIO_Init+0x328>)
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	089b      	lsrs	r3, r3, #2
 8001c2e:	3302      	adds	r3, #2
 8001c30:	69ba      	ldr	r2, [r7, #24]
 8001c32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c36:	4b3d      	ldr	r3, [pc, #244]	; (8001d2c <HAL_GPIO_Init+0x354>)
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	43db      	mvns	r3, r3
 8001c40:	69ba      	ldr	r2, [r7, #24]
 8001c42:	4013      	ands	r3, r2
 8001c44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d003      	beq.n	8001c5a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001c52:	69ba      	ldr	r2, [r7, #24]
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	4313      	orrs	r3, r2
 8001c58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c5a:	4a34      	ldr	r2, [pc, #208]	; (8001d2c <HAL_GPIO_Init+0x354>)
 8001c5c:	69bb      	ldr	r3, [r7, #24]
 8001c5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c60:	4b32      	ldr	r3, [pc, #200]	; (8001d2c <HAL_GPIO_Init+0x354>)
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	43db      	mvns	r3, r3
 8001c6a:	69ba      	ldr	r2, [r7, #24]
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d003      	beq.n	8001c84 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001c7c:	69ba      	ldr	r2, [r7, #24]
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c84:	4a29      	ldr	r2, [pc, #164]	; (8001d2c <HAL_GPIO_Init+0x354>)
 8001c86:	69bb      	ldr	r3, [r7, #24]
 8001c88:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c8a:	4b28      	ldr	r3, [pc, #160]	; (8001d2c <HAL_GPIO_Init+0x354>)
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	43db      	mvns	r3, r3
 8001c94:	69ba      	ldr	r2, [r7, #24]
 8001c96:	4013      	ands	r3, r2
 8001c98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d003      	beq.n	8001cae <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001ca6:	69ba      	ldr	r2, [r7, #24]
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	4313      	orrs	r3, r2
 8001cac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001cae:	4a1f      	ldr	r2, [pc, #124]	; (8001d2c <HAL_GPIO_Init+0x354>)
 8001cb0:	69bb      	ldr	r3, [r7, #24]
 8001cb2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cb4:	4b1d      	ldr	r3, [pc, #116]	; (8001d2c <HAL_GPIO_Init+0x354>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	43db      	mvns	r3, r3
 8001cbe:	69ba      	ldr	r2, [r7, #24]
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d003      	beq.n	8001cd8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001cd0:	69ba      	ldr	r2, [r7, #24]
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001cd8:	4a14      	ldr	r2, [pc, #80]	; (8001d2c <HAL_GPIO_Init+0x354>)
 8001cda:	69bb      	ldr	r3, [r7, #24]
 8001cdc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	61fb      	str	r3, [r7, #28]
 8001ce4:	69fb      	ldr	r3, [r7, #28]
 8001ce6:	2b0f      	cmp	r3, #15
 8001ce8:	f67f ae84 	bls.w	80019f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001cec:	bf00      	nop
 8001cee:	bf00      	nop
 8001cf0:	3724      	adds	r7, #36	; 0x24
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr
 8001cfa:	bf00      	nop
 8001cfc:	40023800 	.word	0x40023800
 8001d00:	40013800 	.word	0x40013800
 8001d04:	40020000 	.word	0x40020000
 8001d08:	40020400 	.word	0x40020400
 8001d0c:	40020800 	.word	0x40020800
 8001d10:	40020c00 	.word	0x40020c00
 8001d14:	40021000 	.word	0x40021000
 8001d18:	40021400 	.word	0x40021400
 8001d1c:	40021800 	.word	0x40021800
 8001d20:	40021c00 	.word	0x40021c00
 8001d24:	40022000 	.word	0x40022000
 8001d28:	40022400 	.word	0x40022400
 8001d2c:	40013c00 	.word	0x40013c00

08001d30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	460b      	mov	r3, r1
 8001d3a:	807b      	strh	r3, [r7, #2]
 8001d3c:	4613      	mov	r3, r2
 8001d3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d40:	787b      	ldrb	r3, [r7, #1]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d003      	beq.n	8001d4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d46:	887a      	ldrh	r2, [r7, #2]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d4c:	e003      	b.n	8001d56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d4e:	887b      	ldrh	r3, [r7, #2]
 8001d50:	041a      	lsls	r2, r3, #16
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	619a      	str	r2, [r3, #24]
}
 8001d56:	bf00      	nop
 8001d58:	370c      	adds	r7, #12
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr

08001d62 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001d62:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d64:	b08f      	sub	sp, #60	; 0x3c
 8001d66:	af0a      	add	r7, sp, #40	; 0x28
 8001d68:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d101      	bne.n	8001d74 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	e10f      	b.n	8001f94 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d106      	bne.n	8001d94 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f7ff f8d2 	bl	8000f38 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2203      	movs	r2, #3
 8001d98:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001da0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d102      	bne.n	8001dae <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2200      	movs	r2, #0
 8001dac:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4618      	mov	r0, r3
 8001db4:	f001 f8ad 	bl	8002f12 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	603b      	str	r3, [r7, #0]
 8001dbe:	687e      	ldr	r6, [r7, #4]
 8001dc0:	466d      	mov	r5, sp
 8001dc2:	f106 0410 	add.w	r4, r6, #16
 8001dc6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001dc8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001dca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001dcc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001dce:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001dd2:	e885 0003 	stmia.w	r5, {r0, r1}
 8001dd6:	1d33      	adds	r3, r6, #4
 8001dd8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001dda:	6838      	ldr	r0, [r7, #0]
 8001ddc:	f001 f838 	bl	8002e50 <USB_CoreInit>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d005      	beq.n	8001df2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2202      	movs	r2, #2
 8001dea:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e0d0      	b.n	8001f94 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	2100      	movs	r1, #0
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f001 f89b 	bl	8002f34 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001dfe:	2300      	movs	r3, #0
 8001e00:	73fb      	strb	r3, [r7, #15]
 8001e02:	e04a      	b.n	8001e9a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001e04:	7bfa      	ldrb	r2, [r7, #15]
 8001e06:	6879      	ldr	r1, [r7, #4]
 8001e08:	4613      	mov	r3, r2
 8001e0a:	00db      	lsls	r3, r3, #3
 8001e0c:	4413      	add	r3, r2
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	440b      	add	r3, r1
 8001e12:	333d      	adds	r3, #61	; 0x3d
 8001e14:	2201      	movs	r2, #1
 8001e16:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001e18:	7bfa      	ldrb	r2, [r7, #15]
 8001e1a:	6879      	ldr	r1, [r7, #4]
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	00db      	lsls	r3, r3, #3
 8001e20:	4413      	add	r3, r2
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	440b      	add	r3, r1
 8001e26:	333c      	adds	r3, #60	; 0x3c
 8001e28:	7bfa      	ldrb	r2, [r7, #15]
 8001e2a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001e2c:	7bfa      	ldrb	r2, [r7, #15]
 8001e2e:	7bfb      	ldrb	r3, [r7, #15]
 8001e30:	b298      	uxth	r0, r3
 8001e32:	6879      	ldr	r1, [r7, #4]
 8001e34:	4613      	mov	r3, r2
 8001e36:	00db      	lsls	r3, r3, #3
 8001e38:	4413      	add	r3, r2
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	440b      	add	r3, r1
 8001e3e:	3344      	adds	r3, #68	; 0x44
 8001e40:	4602      	mov	r2, r0
 8001e42:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001e44:	7bfa      	ldrb	r2, [r7, #15]
 8001e46:	6879      	ldr	r1, [r7, #4]
 8001e48:	4613      	mov	r3, r2
 8001e4a:	00db      	lsls	r3, r3, #3
 8001e4c:	4413      	add	r3, r2
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	440b      	add	r3, r1
 8001e52:	3340      	adds	r3, #64	; 0x40
 8001e54:	2200      	movs	r2, #0
 8001e56:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001e58:	7bfa      	ldrb	r2, [r7, #15]
 8001e5a:	6879      	ldr	r1, [r7, #4]
 8001e5c:	4613      	mov	r3, r2
 8001e5e:	00db      	lsls	r3, r3, #3
 8001e60:	4413      	add	r3, r2
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	440b      	add	r3, r1
 8001e66:	3348      	adds	r3, #72	; 0x48
 8001e68:	2200      	movs	r2, #0
 8001e6a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001e6c:	7bfa      	ldrb	r2, [r7, #15]
 8001e6e:	6879      	ldr	r1, [r7, #4]
 8001e70:	4613      	mov	r3, r2
 8001e72:	00db      	lsls	r3, r3, #3
 8001e74:	4413      	add	r3, r2
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	440b      	add	r3, r1
 8001e7a:	334c      	adds	r3, #76	; 0x4c
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001e80:	7bfa      	ldrb	r2, [r7, #15]
 8001e82:	6879      	ldr	r1, [r7, #4]
 8001e84:	4613      	mov	r3, r2
 8001e86:	00db      	lsls	r3, r3, #3
 8001e88:	4413      	add	r3, r2
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	440b      	add	r3, r1
 8001e8e:	3354      	adds	r3, #84	; 0x54
 8001e90:	2200      	movs	r2, #0
 8001e92:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e94:	7bfb      	ldrb	r3, [r7, #15]
 8001e96:	3301      	adds	r3, #1
 8001e98:	73fb      	strb	r3, [r7, #15]
 8001e9a:	7bfa      	ldrb	r2, [r7, #15]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d3af      	bcc.n	8001e04 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	73fb      	strb	r3, [r7, #15]
 8001ea8:	e044      	b.n	8001f34 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001eaa:	7bfa      	ldrb	r2, [r7, #15]
 8001eac:	6879      	ldr	r1, [r7, #4]
 8001eae:	4613      	mov	r3, r2
 8001eb0:	00db      	lsls	r3, r3, #3
 8001eb2:	4413      	add	r3, r2
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	440b      	add	r3, r1
 8001eb8:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001ec0:	7bfa      	ldrb	r2, [r7, #15]
 8001ec2:	6879      	ldr	r1, [r7, #4]
 8001ec4:	4613      	mov	r3, r2
 8001ec6:	00db      	lsls	r3, r3, #3
 8001ec8:	4413      	add	r3, r2
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	440b      	add	r3, r1
 8001ece:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001ed2:	7bfa      	ldrb	r2, [r7, #15]
 8001ed4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001ed6:	7bfa      	ldrb	r2, [r7, #15]
 8001ed8:	6879      	ldr	r1, [r7, #4]
 8001eda:	4613      	mov	r3, r2
 8001edc:	00db      	lsls	r3, r3, #3
 8001ede:	4413      	add	r3, r2
 8001ee0:	009b      	lsls	r3, r3, #2
 8001ee2:	440b      	add	r3, r1
 8001ee4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001ee8:	2200      	movs	r2, #0
 8001eea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001eec:	7bfa      	ldrb	r2, [r7, #15]
 8001eee:	6879      	ldr	r1, [r7, #4]
 8001ef0:	4613      	mov	r3, r2
 8001ef2:	00db      	lsls	r3, r3, #3
 8001ef4:	4413      	add	r3, r2
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	440b      	add	r3, r1
 8001efa:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001efe:	2200      	movs	r2, #0
 8001f00:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001f02:	7bfa      	ldrb	r2, [r7, #15]
 8001f04:	6879      	ldr	r1, [r7, #4]
 8001f06:	4613      	mov	r3, r2
 8001f08:	00db      	lsls	r3, r3, #3
 8001f0a:	4413      	add	r3, r2
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	440b      	add	r3, r1
 8001f10:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001f14:	2200      	movs	r2, #0
 8001f16:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001f18:	7bfa      	ldrb	r2, [r7, #15]
 8001f1a:	6879      	ldr	r1, [r7, #4]
 8001f1c:	4613      	mov	r3, r2
 8001f1e:	00db      	lsls	r3, r3, #3
 8001f20:	4413      	add	r3, r2
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	440b      	add	r3, r1
 8001f26:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f2e:	7bfb      	ldrb	r3, [r7, #15]
 8001f30:	3301      	adds	r3, #1
 8001f32:	73fb      	strb	r3, [r7, #15]
 8001f34:	7bfa      	ldrb	r2, [r7, #15]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	429a      	cmp	r2, r3
 8001f3c:	d3b5      	bcc.n	8001eaa <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	603b      	str	r3, [r7, #0]
 8001f44:	687e      	ldr	r6, [r7, #4]
 8001f46:	466d      	mov	r5, sp
 8001f48:	f106 0410 	add.w	r4, r6, #16
 8001f4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f4e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f52:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f54:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f58:	e885 0003 	stmia.w	r5, {r0, r1}
 8001f5c:	1d33      	adds	r3, r6, #4
 8001f5e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f60:	6838      	ldr	r0, [r7, #0]
 8001f62:	f001 f833 	bl	8002fcc <USB_DevInit>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d005      	beq.n	8001f78 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2202      	movs	r2, #2
 8001f70:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	e00d      	b.n	8001f94 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2201      	movs	r2, #1
 8001f84:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f001 f9fe 	bl	800338e <USB_DevDisconnect>

  return HAL_OK;
 8001f92:	2300      	movs	r3, #0
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	3714      	adds	r7, #20
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001f9c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b086      	sub	sp, #24
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d101      	bne.n	8001fae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e267      	b.n	800247e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 0301 	and.w	r3, r3, #1
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d075      	beq.n	80020a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001fba:	4b88      	ldr	r3, [pc, #544]	; (80021dc <HAL_RCC_OscConfig+0x240>)
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	f003 030c 	and.w	r3, r3, #12
 8001fc2:	2b04      	cmp	r3, #4
 8001fc4:	d00c      	beq.n	8001fe0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fc6:	4b85      	ldr	r3, [pc, #532]	; (80021dc <HAL_RCC_OscConfig+0x240>)
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001fce:	2b08      	cmp	r3, #8
 8001fd0:	d112      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fd2:	4b82      	ldr	r3, [pc, #520]	; (80021dc <HAL_RCC_OscConfig+0x240>)
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fda:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001fde:	d10b      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fe0:	4b7e      	ldr	r3, [pc, #504]	; (80021dc <HAL_RCC_OscConfig+0x240>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d05b      	beq.n	80020a4 <HAL_RCC_OscConfig+0x108>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d157      	bne.n	80020a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	e242      	b.n	800247e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002000:	d106      	bne.n	8002010 <HAL_RCC_OscConfig+0x74>
 8002002:	4b76      	ldr	r3, [pc, #472]	; (80021dc <HAL_RCC_OscConfig+0x240>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a75      	ldr	r2, [pc, #468]	; (80021dc <HAL_RCC_OscConfig+0x240>)
 8002008:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800200c:	6013      	str	r3, [r2, #0]
 800200e:	e01d      	b.n	800204c <HAL_RCC_OscConfig+0xb0>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002018:	d10c      	bne.n	8002034 <HAL_RCC_OscConfig+0x98>
 800201a:	4b70      	ldr	r3, [pc, #448]	; (80021dc <HAL_RCC_OscConfig+0x240>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a6f      	ldr	r2, [pc, #444]	; (80021dc <HAL_RCC_OscConfig+0x240>)
 8002020:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002024:	6013      	str	r3, [r2, #0]
 8002026:	4b6d      	ldr	r3, [pc, #436]	; (80021dc <HAL_RCC_OscConfig+0x240>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a6c      	ldr	r2, [pc, #432]	; (80021dc <HAL_RCC_OscConfig+0x240>)
 800202c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002030:	6013      	str	r3, [r2, #0]
 8002032:	e00b      	b.n	800204c <HAL_RCC_OscConfig+0xb0>
 8002034:	4b69      	ldr	r3, [pc, #420]	; (80021dc <HAL_RCC_OscConfig+0x240>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a68      	ldr	r2, [pc, #416]	; (80021dc <HAL_RCC_OscConfig+0x240>)
 800203a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800203e:	6013      	str	r3, [r2, #0]
 8002040:	4b66      	ldr	r3, [pc, #408]	; (80021dc <HAL_RCC_OscConfig+0x240>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a65      	ldr	r2, [pc, #404]	; (80021dc <HAL_RCC_OscConfig+0x240>)
 8002046:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800204a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d013      	beq.n	800207c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002054:	f7ff f896 	bl	8001184 <HAL_GetTick>
 8002058:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800205a:	e008      	b.n	800206e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800205c:	f7ff f892 	bl	8001184 <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	2b64      	cmp	r3, #100	; 0x64
 8002068:	d901      	bls.n	800206e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	e207      	b.n	800247e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800206e:	4b5b      	ldr	r3, [pc, #364]	; (80021dc <HAL_RCC_OscConfig+0x240>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002076:	2b00      	cmp	r3, #0
 8002078:	d0f0      	beq.n	800205c <HAL_RCC_OscConfig+0xc0>
 800207a:	e014      	b.n	80020a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800207c:	f7ff f882 	bl	8001184 <HAL_GetTick>
 8002080:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002082:	e008      	b.n	8002096 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002084:	f7ff f87e 	bl	8001184 <HAL_GetTick>
 8002088:	4602      	mov	r2, r0
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	2b64      	cmp	r3, #100	; 0x64
 8002090:	d901      	bls.n	8002096 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002092:	2303      	movs	r3, #3
 8002094:	e1f3      	b.n	800247e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002096:	4b51      	ldr	r3, [pc, #324]	; (80021dc <HAL_RCC_OscConfig+0x240>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d1f0      	bne.n	8002084 <HAL_RCC_OscConfig+0xe8>
 80020a2:	e000      	b.n	80020a6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0302 	and.w	r3, r3, #2
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d063      	beq.n	800217a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80020b2:	4b4a      	ldr	r3, [pc, #296]	; (80021dc <HAL_RCC_OscConfig+0x240>)
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	f003 030c 	and.w	r3, r3, #12
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d00b      	beq.n	80020d6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020be:	4b47      	ldr	r3, [pc, #284]	; (80021dc <HAL_RCC_OscConfig+0x240>)
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80020c6:	2b08      	cmp	r3, #8
 80020c8:	d11c      	bne.n	8002104 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020ca:	4b44      	ldr	r3, [pc, #272]	; (80021dc <HAL_RCC_OscConfig+0x240>)
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d116      	bne.n	8002104 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020d6:	4b41      	ldr	r3, [pc, #260]	; (80021dc <HAL_RCC_OscConfig+0x240>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 0302 	and.w	r3, r3, #2
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d005      	beq.n	80020ee <HAL_RCC_OscConfig+0x152>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	68db      	ldr	r3, [r3, #12]
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d001      	beq.n	80020ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e1c7      	b.n	800247e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020ee:	4b3b      	ldr	r3, [pc, #236]	; (80021dc <HAL_RCC_OscConfig+0x240>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	691b      	ldr	r3, [r3, #16]
 80020fa:	00db      	lsls	r3, r3, #3
 80020fc:	4937      	ldr	r1, [pc, #220]	; (80021dc <HAL_RCC_OscConfig+0x240>)
 80020fe:	4313      	orrs	r3, r2
 8002100:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002102:	e03a      	b.n	800217a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d020      	beq.n	800214e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800210c:	4b34      	ldr	r3, [pc, #208]	; (80021e0 <HAL_RCC_OscConfig+0x244>)
 800210e:	2201      	movs	r2, #1
 8002110:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002112:	f7ff f837 	bl	8001184 <HAL_GetTick>
 8002116:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002118:	e008      	b.n	800212c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800211a:	f7ff f833 	bl	8001184 <HAL_GetTick>
 800211e:	4602      	mov	r2, r0
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	1ad3      	subs	r3, r2, r3
 8002124:	2b02      	cmp	r3, #2
 8002126:	d901      	bls.n	800212c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002128:	2303      	movs	r3, #3
 800212a:	e1a8      	b.n	800247e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800212c:	4b2b      	ldr	r3, [pc, #172]	; (80021dc <HAL_RCC_OscConfig+0x240>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 0302 	and.w	r3, r3, #2
 8002134:	2b00      	cmp	r3, #0
 8002136:	d0f0      	beq.n	800211a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002138:	4b28      	ldr	r3, [pc, #160]	; (80021dc <HAL_RCC_OscConfig+0x240>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	691b      	ldr	r3, [r3, #16]
 8002144:	00db      	lsls	r3, r3, #3
 8002146:	4925      	ldr	r1, [pc, #148]	; (80021dc <HAL_RCC_OscConfig+0x240>)
 8002148:	4313      	orrs	r3, r2
 800214a:	600b      	str	r3, [r1, #0]
 800214c:	e015      	b.n	800217a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800214e:	4b24      	ldr	r3, [pc, #144]	; (80021e0 <HAL_RCC_OscConfig+0x244>)
 8002150:	2200      	movs	r2, #0
 8002152:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002154:	f7ff f816 	bl	8001184 <HAL_GetTick>
 8002158:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800215a:	e008      	b.n	800216e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800215c:	f7ff f812 	bl	8001184 <HAL_GetTick>
 8002160:	4602      	mov	r2, r0
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	2b02      	cmp	r3, #2
 8002168:	d901      	bls.n	800216e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800216a:	2303      	movs	r3, #3
 800216c:	e187      	b.n	800247e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800216e:	4b1b      	ldr	r3, [pc, #108]	; (80021dc <HAL_RCC_OscConfig+0x240>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 0302 	and.w	r3, r3, #2
 8002176:	2b00      	cmp	r3, #0
 8002178:	d1f0      	bne.n	800215c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 0308 	and.w	r3, r3, #8
 8002182:	2b00      	cmp	r3, #0
 8002184:	d036      	beq.n	80021f4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	695b      	ldr	r3, [r3, #20]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d016      	beq.n	80021bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800218e:	4b15      	ldr	r3, [pc, #84]	; (80021e4 <HAL_RCC_OscConfig+0x248>)
 8002190:	2201      	movs	r2, #1
 8002192:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002194:	f7fe fff6 	bl	8001184 <HAL_GetTick>
 8002198:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800219a:	e008      	b.n	80021ae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800219c:	f7fe fff2 	bl	8001184 <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d901      	bls.n	80021ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e167      	b.n	800247e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021ae:	4b0b      	ldr	r3, [pc, #44]	; (80021dc <HAL_RCC_OscConfig+0x240>)
 80021b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021b2:	f003 0302 	and.w	r3, r3, #2
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d0f0      	beq.n	800219c <HAL_RCC_OscConfig+0x200>
 80021ba:	e01b      	b.n	80021f4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021bc:	4b09      	ldr	r3, [pc, #36]	; (80021e4 <HAL_RCC_OscConfig+0x248>)
 80021be:	2200      	movs	r2, #0
 80021c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021c2:	f7fe ffdf 	bl	8001184 <HAL_GetTick>
 80021c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021c8:	e00e      	b.n	80021e8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021ca:	f7fe ffdb 	bl	8001184 <HAL_GetTick>
 80021ce:	4602      	mov	r2, r0
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	1ad3      	subs	r3, r2, r3
 80021d4:	2b02      	cmp	r3, #2
 80021d6:	d907      	bls.n	80021e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80021d8:	2303      	movs	r3, #3
 80021da:	e150      	b.n	800247e <HAL_RCC_OscConfig+0x4e2>
 80021dc:	40023800 	.word	0x40023800
 80021e0:	42470000 	.word	0x42470000
 80021e4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021e8:	4b88      	ldr	r3, [pc, #544]	; (800240c <HAL_RCC_OscConfig+0x470>)
 80021ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021ec:	f003 0302 	and.w	r3, r3, #2
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d1ea      	bne.n	80021ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 0304 	and.w	r3, r3, #4
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	f000 8097 	beq.w	8002330 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002202:	2300      	movs	r3, #0
 8002204:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002206:	4b81      	ldr	r3, [pc, #516]	; (800240c <HAL_RCC_OscConfig+0x470>)
 8002208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800220e:	2b00      	cmp	r3, #0
 8002210:	d10f      	bne.n	8002232 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002212:	2300      	movs	r3, #0
 8002214:	60bb      	str	r3, [r7, #8]
 8002216:	4b7d      	ldr	r3, [pc, #500]	; (800240c <HAL_RCC_OscConfig+0x470>)
 8002218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221a:	4a7c      	ldr	r2, [pc, #496]	; (800240c <HAL_RCC_OscConfig+0x470>)
 800221c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002220:	6413      	str	r3, [r2, #64]	; 0x40
 8002222:	4b7a      	ldr	r3, [pc, #488]	; (800240c <HAL_RCC_OscConfig+0x470>)
 8002224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002226:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800222a:	60bb      	str	r3, [r7, #8]
 800222c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800222e:	2301      	movs	r3, #1
 8002230:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002232:	4b77      	ldr	r3, [pc, #476]	; (8002410 <HAL_RCC_OscConfig+0x474>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800223a:	2b00      	cmp	r3, #0
 800223c:	d118      	bne.n	8002270 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800223e:	4b74      	ldr	r3, [pc, #464]	; (8002410 <HAL_RCC_OscConfig+0x474>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a73      	ldr	r2, [pc, #460]	; (8002410 <HAL_RCC_OscConfig+0x474>)
 8002244:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002248:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800224a:	f7fe ff9b 	bl	8001184 <HAL_GetTick>
 800224e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002250:	e008      	b.n	8002264 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002252:	f7fe ff97 	bl	8001184 <HAL_GetTick>
 8002256:	4602      	mov	r2, r0
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	1ad3      	subs	r3, r2, r3
 800225c:	2b02      	cmp	r3, #2
 800225e:	d901      	bls.n	8002264 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002260:	2303      	movs	r3, #3
 8002262:	e10c      	b.n	800247e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002264:	4b6a      	ldr	r3, [pc, #424]	; (8002410 <HAL_RCC_OscConfig+0x474>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800226c:	2b00      	cmp	r3, #0
 800226e:	d0f0      	beq.n	8002252 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	2b01      	cmp	r3, #1
 8002276:	d106      	bne.n	8002286 <HAL_RCC_OscConfig+0x2ea>
 8002278:	4b64      	ldr	r3, [pc, #400]	; (800240c <HAL_RCC_OscConfig+0x470>)
 800227a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800227c:	4a63      	ldr	r2, [pc, #396]	; (800240c <HAL_RCC_OscConfig+0x470>)
 800227e:	f043 0301 	orr.w	r3, r3, #1
 8002282:	6713      	str	r3, [r2, #112]	; 0x70
 8002284:	e01c      	b.n	80022c0 <HAL_RCC_OscConfig+0x324>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	2b05      	cmp	r3, #5
 800228c:	d10c      	bne.n	80022a8 <HAL_RCC_OscConfig+0x30c>
 800228e:	4b5f      	ldr	r3, [pc, #380]	; (800240c <HAL_RCC_OscConfig+0x470>)
 8002290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002292:	4a5e      	ldr	r2, [pc, #376]	; (800240c <HAL_RCC_OscConfig+0x470>)
 8002294:	f043 0304 	orr.w	r3, r3, #4
 8002298:	6713      	str	r3, [r2, #112]	; 0x70
 800229a:	4b5c      	ldr	r3, [pc, #368]	; (800240c <HAL_RCC_OscConfig+0x470>)
 800229c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800229e:	4a5b      	ldr	r2, [pc, #364]	; (800240c <HAL_RCC_OscConfig+0x470>)
 80022a0:	f043 0301 	orr.w	r3, r3, #1
 80022a4:	6713      	str	r3, [r2, #112]	; 0x70
 80022a6:	e00b      	b.n	80022c0 <HAL_RCC_OscConfig+0x324>
 80022a8:	4b58      	ldr	r3, [pc, #352]	; (800240c <HAL_RCC_OscConfig+0x470>)
 80022aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ac:	4a57      	ldr	r2, [pc, #348]	; (800240c <HAL_RCC_OscConfig+0x470>)
 80022ae:	f023 0301 	bic.w	r3, r3, #1
 80022b2:	6713      	str	r3, [r2, #112]	; 0x70
 80022b4:	4b55      	ldr	r3, [pc, #340]	; (800240c <HAL_RCC_OscConfig+0x470>)
 80022b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022b8:	4a54      	ldr	r2, [pc, #336]	; (800240c <HAL_RCC_OscConfig+0x470>)
 80022ba:	f023 0304 	bic.w	r3, r3, #4
 80022be:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d015      	beq.n	80022f4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022c8:	f7fe ff5c 	bl	8001184 <HAL_GetTick>
 80022cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022ce:	e00a      	b.n	80022e6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022d0:	f7fe ff58 	bl	8001184 <HAL_GetTick>
 80022d4:	4602      	mov	r2, r0
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	f241 3288 	movw	r2, #5000	; 0x1388
 80022de:	4293      	cmp	r3, r2
 80022e0:	d901      	bls.n	80022e6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80022e2:	2303      	movs	r3, #3
 80022e4:	e0cb      	b.n	800247e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022e6:	4b49      	ldr	r3, [pc, #292]	; (800240c <HAL_RCC_OscConfig+0x470>)
 80022e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ea:	f003 0302 	and.w	r3, r3, #2
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d0ee      	beq.n	80022d0 <HAL_RCC_OscConfig+0x334>
 80022f2:	e014      	b.n	800231e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022f4:	f7fe ff46 	bl	8001184 <HAL_GetTick>
 80022f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022fa:	e00a      	b.n	8002312 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022fc:	f7fe ff42 	bl	8001184 <HAL_GetTick>
 8002300:	4602      	mov	r2, r0
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	f241 3288 	movw	r2, #5000	; 0x1388
 800230a:	4293      	cmp	r3, r2
 800230c:	d901      	bls.n	8002312 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800230e:	2303      	movs	r3, #3
 8002310:	e0b5      	b.n	800247e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002312:	4b3e      	ldr	r3, [pc, #248]	; (800240c <HAL_RCC_OscConfig+0x470>)
 8002314:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002316:	f003 0302 	and.w	r3, r3, #2
 800231a:	2b00      	cmp	r3, #0
 800231c:	d1ee      	bne.n	80022fc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800231e:	7dfb      	ldrb	r3, [r7, #23]
 8002320:	2b01      	cmp	r3, #1
 8002322:	d105      	bne.n	8002330 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002324:	4b39      	ldr	r3, [pc, #228]	; (800240c <HAL_RCC_OscConfig+0x470>)
 8002326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002328:	4a38      	ldr	r2, [pc, #224]	; (800240c <HAL_RCC_OscConfig+0x470>)
 800232a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800232e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	699b      	ldr	r3, [r3, #24]
 8002334:	2b00      	cmp	r3, #0
 8002336:	f000 80a1 	beq.w	800247c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800233a:	4b34      	ldr	r3, [pc, #208]	; (800240c <HAL_RCC_OscConfig+0x470>)
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	f003 030c 	and.w	r3, r3, #12
 8002342:	2b08      	cmp	r3, #8
 8002344:	d05c      	beq.n	8002400 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	699b      	ldr	r3, [r3, #24]
 800234a:	2b02      	cmp	r3, #2
 800234c:	d141      	bne.n	80023d2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800234e:	4b31      	ldr	r3, [pc, #196]	; (8002414 <HAL_RCC_OscConfig+0x478>)
 8002350:	2200      	movs	r2, #0
 8002352:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002354:	f7fe ff16 	bl	8001184 <HAL_GetTick>
 8002358:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800235a:	e008      	b.n	800236e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800235c:	f7fe ff12 	bl	8001184 <HAL_GetTick>
 8002360:	4602      	mov	r2, r0
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	2b02      	cmp	r3, #2
 8002368:	d901      	bls.n	800236e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800236a:	2303      	movs	r3, #3
 800236c:	e087      	b.n	800247e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800236e:	4b27      	ldr	r3, [pc, #156]	; (800240c <HAL_RCC_OscConfig+0x470>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002376:	2b00      	cmp	r3, #0
 8002378:	d1f0      	bne.n	800235c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	69da      	ldr	r2, [r3, #28]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6a1b      	ldr	r3, [r3, #32]
 8002382:	431a      	orrs	r2, r3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002388:	019b      	lsls	r3, r3, #6
 800238a:	431a      	orrs	r2, r3
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002390:	085b      	lsrs	r3, r3, #1
 8002392:	3b01      	subs	r3, #1
 8002394:	041b      	lsls	r3, r3, #16
 8002396:	431a      	orrs	r2, r3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800239c:	061b      	lsls	r3, r3, #24
 800239e:	491b      	ldr	r1, [pc, #108]	; (800240c <HAL_RCC_OscConfig+0x470>)
 80023a0:	4313      	orrs	r3, r2
 80023a2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023a4:	4b1b      	ldr	r3, [pc, #108]	; (8002414 <HAL_RCC_OscConfig+0x478>)
 80023a6:	2201      	movs	r2, #1
 80023a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023aa:	f7fe feeb 	bl	8001184 <HAL_GetTick>
 80023ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023b0:	e008      	b.n	80023c4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023b2:	f7fe fee7 	bl	8001184 <HAL_GetTick>
 80023b6:	4602      	mov	r2, r0
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	2b02      	cmp	r3, #2
 80023be:	d901      	bls.n	80023c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80023c0:	2303      	movs	r3, #3
 80023c2:	e05c      	b.n	800247e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023c4:	4b11      	ldr	r3, [pc, #68]	; (800240c <HAL_RCC_OscConfig+0x470>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d0f0      	beq.n	80023b2 <HAL_RCC_OscConfig+0x416>
 80023d0:	e054      	b.n	800247c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023d2:	4b10      	ldr	r3, [pc, #64]	; (8002414 <HAL_RCC_OscConfig+0x478>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023d8:	f7fe fed4 	bl	8001184 <HAL_GetTick>
 80023dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023de:	e008      	b.n	80023f2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023e0:	f7fe fed0 	bl	8001184 <HAL_GetTick>
 80023e4:	4602      	mov	r2, r0
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	d901      	bls.n	80023f2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80023ee:	2303      	movs	r3, #3
 80023f0:	e045      	b.n	800247e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023f2:	4b06      	ldr	r3, [pc, #24]	; (800240c <HAL_RCC_OscConfig+0x470>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d1f0      	bne.n	80023e0 <HAL_RCC_OscConfig+0x444>
 80023fe:	e03d      	b.n	800247c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	699b      	ldr	r3, [r3, #24]
 8002404:	2b01      	cmp	r3, #1
 8002406:	d107      	bne.n	8002418 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e038      	b.n	800247e <HAL_RCC_OscConfig+0x4e2>
 800240c:	40023800 	.word	0x40023800
 8002410:	40007000 	.word	0x40007000
 8002414:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002418:	4b1b      	ldr	r3, [pc, #108]	; (8002488 <HAL_RCC_OscConfig+0x4ec>)
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	699b      	ldr	r3, [r3, #24]
 8002422:	2b01      	cmp	r3, #1
 8002424:	d028      	beq.n	8002478 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002430:	429a      	cmp	r2, r3
 8002432:	d121      	bne.n	8002478 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800243e:	429a      	cmp	r2, r3
 8002440:	d11a      	bne.n	8002478 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002442:	68fa      	ldr	r2, [r7, #12]
 8002444:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002448:	4013      	ands	r3, r2
 800244a:	687a      	ldr	r2, [r7, #4]
 800244c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800244e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002450:	4293      	cmp	r3, r2
 8002452:	d111      	bne.n	8002478 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800245e:	085b      	lsrs	r3, r3, #1
 8002460:	3b01      	subs	r3, #1
 8002462:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002464:	429a      	cmp	r2, r3
 8002466:	d107      	bne.n	8002478 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002472:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002474:	429a      	cmp	r2, r3
 8002476:	d001      	beq.n	800247c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	e000      	b.n	800247e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800247c:	2300      	movs	r3, #0
}
 800247e:	4618      	mov	r0, r3
 8002480:	3718      	adds	r7, #24
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	40023800 	.word	0x40023800

0800248c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b084      	sub	sp, #16
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d101      	bne.n	80024a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	e0cc      	b.n	800263a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024a0:	4b68      	ldr	r3, [pc, #416]	; (8002644 <HAL_RCC_ClockConfig+0x1b8>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 030f 	and.w	r3, r3, #15
 80024a8:	683a      	ldr	r2, [r7, #0]
 80024aa:	429a      	cmp	r2, r3
 80024ac:	d90c      	bls.n	80024c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ae:	4b65      	ldr	r3, [pc, #404]	; (8002644 <HAL_RCC_ClockConfig+0x1b8>)
 80024b0:	683a      	ldr	r2, [r7, #0]
 80024b2:	b2d2      	uxtb	r2, r2
 80024b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024b6:	4b63      	ldr	r3, [pc, #396]	; (8002644 <HAL_RCC_ClockConfig+0x1b8>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 030f 	and.w	r3, r3, #15
 80024be:	683a      	ldr	r2, [r7, #0]
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d001      	beq.n	80024c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	e0b8      	b.n	800263a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0302 	and.w	r3, r3, #2
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d020      	beq.n	8002516 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 0304 	and.w	r3, r3, #4
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d005      	beq.n	80024ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024e0:	4b59      	ldr	r3, [pc, #356]	; (8002648 <HAL_RCC_ClockConfig+0x1bc>)
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	4a58      	ldr	r2, [pc, #352]	; (8002648 <HAL_RCC_ClockConfig+0x1bc>)
 80024e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80024ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 0308 	and.w	r3, r3, #8
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d005      	beq.n	8002504 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024f8:	4b53      	ldr	r3, [pc, #332]	; (8002648 <HAL_RCC_ClockConfig+0x1bc>)
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	4a52      	ldr	r2, [pc, #328]	; (8002648 <HAL_RCC_ClockConfig+0x1bc>)
 80024fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002502:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002504:	4b50      	ldr	r3, [pc, #320]	; (8002648 <HAL_RCC_ClockConfig+0x1bc>)
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	494d      	ldr	r1, [pc, #308]	; (8002648 <HAL_RCC_ClockConfig+0x1bc>)
 8002512:	4313      	orrs	r3, r2
 8002514:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 0301 	and.w	r3, r3, #1
 800251e:	2b00      	cmp	r3, #0
 8002520:	d044      	beq.n	80025ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	2b01      	cmp	r3, #1
 8002528:	d107      	bne.n	800253a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800252a:	4b47      	ldr	r3, [pc, #284]	; (8002648 <HAL_RCC_ClockConfig+0x1bc>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d119      	bne.n	800256a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e07f      	b.n	800263a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	2b02      	cmp	r3, #2
 8002540:	d003      	beq.n	800254a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002546:	2b03      	cmp	r3, #3
 8002548:	d107      	bne.n	800255a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800254a:	4b3f      	ldr	r3, [pc, #252]	; (8002648 <HAL_RCC_ClockConfig+0x1bc>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d109      	bne.n	800256a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e06f      	b.n	800263a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800255a:	4b3b      	ldr	r3, [pc, #236]	; (8002648 <HAL_RCC_ClockConfig+0x1bc>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 0302 	and.w	r3, r3, #2
 8002562:	2b00      	cmp	r3, #0
 8002564:	d101      	bne.n	800256a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e067      	b.n	800263a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800256a:	4b37      	ldr	r3, [pc, #220]	; (8002648 <HAL_RCC_ClockConfig+0x1bc>)
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	f023 0203 	bic.w	r2, r3, #3
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	4934      	ldr	r1, [pc, #208]	; (8002648 <HAL_RCC_ClockConfig+0x1bc>)
 8002578:	4313      	orrs	r3, r2
 800257a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800257c:	f7fe fe02 	bl	8001184 <HAL_GetTick>
 8002580:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002582:	e00a      	b.n	800259a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002584:	f7fe fdfe 	bl	8001184 <HAL_GetTick>
 8002588:	4602      	mov	r2, r0
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	1ad3      	subs	r3, r2, r3
 800258e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002592:	4293      	cmp	r3, r2
 8002594:	d901      	bls.n	800259a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002596:	2303      	movs	r3, #3
 8002598:	e04f      	b.n	800263a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800259a:	4b2b      	ldr	r3, [pc, #172]	; (8002648 <HAL_RCC_ClockConfig+0x1bc>)
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	f003 020c 	and.w	r2, r3, #12
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d1eb      	bne.n	8002584 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025ac:	4b25      	ldr	r3, [pc, #148]	; (8002644 <HAL_RCC_ClockConfig+0x1b8>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 030f 	and.w	r3, r3, #15
 80025b4:	683a      	ldr	r2, [r7, #0]
 80025b6:	429a      	cmp	r2, r3
 80025b8:	d20c      	bcs.n	80025d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025ba:	4b22      	ldr	r3, [pc, #136]	; (8002644 <HAL_RCC_ClockConfig+0x1b8>)
 80025bc:	683a      	ldr	r2, [r7, #0]
 80025be:	b2d2      	uxtb	r2, r2
 80025c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025c2:	4b20      	ldr	r3, [pc, #128]	; (8002644 <HAL_RCC_ClockConfig+0x1b8>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 030f 	and.w	r3, r3, #15
 80025ca:	683a      	ldr	r2, [r7, #0]
 80025cc:	429a      	cmp	r2, r3
 80025ce:	d001      	beq.n	80025d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	e032      	b.n	800263a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 0304 	and.w	r3, r3, #4
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d008      	beq.n	80025f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025e0:	4b19      	ldr	r3, [pc, #100]	; (8002648 <HAL_RCC_ClockConfig+0x1bc>)
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	4916      	ldr	r1, [pc, #88]	; (8002648 <HAL_RCC_ClockConfig+0x1bc>)
 80025ee:	4313      	orrs	r3, r2
 80025f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 0308 	and.w	r3, r3, #8
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d009      	beq.n	8002612 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025fe:	4b12      	ldr	r3, [pc, #72]	; (8002648 <HAL_RCC_ClockConfig+0x1bc>)
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	691b      	ldr	r3, [r3, #16]
 800260a:	00db      	lsls	r3, r3, #3
 800260c:	490e      	ldr	r1, [pc, #56]	; (8002648 <HAL_RCC_ClockConfig+0x1bc>)
 800260e:	4313      	orrs	r3, r2
 8002610:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002612:	f000 f821 	bl	8002658 <HAL_RCC_GetSysClockFreq>
 8002616:	4602      	mov	r2, r0
 8002618:	4b0b      	ldr	r3, [pc, #44]	; (8002648 <HAL_RCC_ClockConfig+0x1bc>)
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	091b      	lsrs	r3, r3, #4
 800261e:	f003 030f 	and.w	r3, r3, #15
 8002622:	490a      	ldr	r1, [pc, #40]	; (800264c <HAL_RCC_ClockConfig+0x1c0>)
 8002624:	5ccb      	ldrb	r3, [r1, r3]
 8002626:	fa22 f303 	lsr.w	r3, r2, r3
 800262a:	4a09      	ldr	r2, [pc, #36]	; (8002650 <HAL_RCC_ClockConfig+0x1c4>)
 800262c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800262e:	4b09      	ldr	r3, [pc, #36]	; (8002654 <HAL_RCC_ClockConfig+0x1c8>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4618      	mov	r0, r3
 8002634:	f7fe fd62 	bl	80010fc <HAL_InitTick>

  return HAL_OK;
 8002638:	2300      	movs	r3, #0
}
 800263a:	4618      	mov	r0, r3
 800263c:	3710      	adds	r7, #16
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	40023c00 	.word	0x40023c00
 8002648:	40023800 	.word	0x40023800
 800264c:	08003548 	.word	0x08003548
 8002650:	20000000 	.word	0x20000000
 8002654:	20000004 	.word	0x20000004

08002658 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002658:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800265c:	b094      	sub	sp, #80	; 0x50
 800265e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002660:	2300      	movs	r3, #0
 8002662:	647b      	str	r3, [r7, #68]	; 0x44
 8002664:	2300      	movs	r3, #0
 8002666:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002668:	2300      	movs	r3, #0
 800266a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800266c:	2300      	movs	r3, #0
 800266e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002670:	4b79      	ldr	r3, [pc, #484]	; (8002858 <HAL_RCC_GetSysClockFreq+0x200>)
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	f003 030c 	and.w	r3, r3, #12
 8002678:	2b08      	cmp	r3, #8
 800267a:	d00d      	beq.n	8002698 <HAL_RCC_GetSysClockFreq+0x40>
 800267c:	2b08      	cmp	r3, #8
 800267e:	f200 80e1 	bhi.w	8002844 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002682:	2b00      	cmp	r3, #0
 8002684:	d002      	beq.n	800268c <HAL_RCC_GetSysClockFreq+0x34>
 8002686:	2b04      	cmp	r3, #4
 8002688:	d003      	beq.n	8002692 <HAL_RCC_GetSysClockFreq+0x3a>
 800268a:	e0db      	b.n	8002844 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800268c:	4b73      	ldr	r3, [pc, #460]	; (800285c <HAL_RCC_GetSysClockFreq+0x204>)
 800268e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002690:	e0db      	b.n	800284a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002692:	4b73      	ldr	r3, [pc, #460]	; (8002860 <HAL_RCC_GetSysClockFreq+0x208>)
 8002694:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002696:	e0d8      	b.n	800284a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002698:	4b6f      	ldr	r3, [pc, #444]	; (8002858 <HAL_RCC_GetSysClockFreq+0x200>)
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80026a0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80026a2:	4b6d      	ldr	r3, [pc, #436]	; (8002858 <HAL_RCC_GetSysClockFreq+0x200>)
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d063      	beq.n	8002776 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026ae:	4b6a      	ldr	r3, [pc, #424]	; (8002858 <HAL_RCC_GetSysClockFreq+0x200>)
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	099b      	lsrs	r3, r3, #6
 80026b4:	2200      	movs	r2, #0
 80026b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80026b8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80026ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026c0:	633b      	str	r3, [r7, #48]	; 0x30
 80026c2:	2300      	movs	r3, #0
 80026c4:	637b      	str	r3, [r7, #52]	; 0x34
 80026c6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80026ca:	4622      	mov	r2, r4
 80026cc:	462b      	mov	r3, r5
 80026ce:	f04f 0000 	mov.w	r0, #0
 80026d2:	f04f 0100 	mov.w	r1, #0
 80026d6:	0159      	lsls	r1, r3, #5
 80026d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026dc:	0150      	lsls	r0, r2, #5
 80026de:	4602      	mov	r2, r0
 80026e0:	460b      	mov	r3, r1
 80026e2:	4621      	mov	r1, r4
 80026e4:	1a51      	subs	r1, r2, r1
 80026e6:	6139      	str	r1, [r7, #16]
 80026e8:	4629      	mov	r1, r5
 80026ea:	eb63 0301 	sbc.w	r3, r3, r1
 80026ee:	617b      	str	r3, [r7, #20]
 80026f0:	f04f 0200 	mov.w	r2, #0
 80026f4:	f04f 0300 	mov.w	r3, #0
 80026f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80026fc:	4659      	mov	r1, fp
 80026fe:	018b      	lsls	r3, r1, #6
 8002700:	4651      	mov	r1, sl
 8002702:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002706:	4651      	mov	r1, sl
 8002708:	018a      	lsls	r2, r1, #6
 800270a:	4651      	mov	r1, sl
 800270c:	ebb2 0801 	subs.w	r8, r2, r1
 8002710:	4659      	mov	r1, fp
 8002712:	eb63 0901 	sbc.w	r9, r3, r1
 8002716:	f04f 0200 	mov.w	r2, #0
 800271a:	f04f 0300 	mov.w	r3, #0
 800271e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002722:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002726:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800272a:	4690      	mov	r8, r2
 800272c:	4699      	mov	r9, r3
 800272e:	4623      	mov	r3, r4
 8002730:	eb18 0303 	adds.w	r3, r8, r3
 8002734:	60bb      	str	r3, [r7, #8]
 8002736:	462b      	mov	r3, r5
 8002738:	eb49 0303 	adc.w	r3, r9, r3
 800273c:	60fb      	str	r3, [r7, #12]
 800273e:	f04f 0200 	mov.w	r2, #0
 8002742:	f04f 0300 	mov.w	r3, #0
 8002746:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800274a:	4629      	mov	r1, r5
 800274c:	024b      	lsls	r3, r1, #9
 800274e:	4621      	mov	r1, r4
 8002750:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002754:	4621      	mov	r1, r4
 8002756:	024a      	lsls	r2, r1, #9
 8002758:	4610      	mov	r0, r2
 800275a:	4619      	mov	r1, r3
 800275c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800275e:	2200      	movs	r2, #0
 8002760:	62bb      	str	r3, [r7, #40]	; 0x28
 8002762:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002764:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002768:	f7fd fde0 	bl	800032c <__aeabi_uldivmod>
 800276c:	4602      	mov	r2, r0
 800276e:	460b      	mov	r3, r1
 8002770:	4613      	mov	r3, r2
 8002772:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002774:	e058      	b.n	8002828 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002776:	4b38      	ldr	r3, [pc, #224]	; (8002858 <HAL_RCC_GetSysClockFreq+0x200>)
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	099b      	lsrs	r3, r3, #6
 800277c:	2200      	movs	r2, #0
 800277e:	4618      	mov	r0, r3
 8002780:	4611      	mov	r1, r2
 8002782:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002786:	623b      	str	r3, [r7, #32]
 8002788:	2300      	movs	r3, #0
 800278a:	627b      	str	r3, [r7, #36]	; 0x24
 800278c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002790:	4642      	mov	r2, r8
 8002792:	464b      	mov	r3, r9
 8002794:	f04f 0000 	mov.w	r0, #0
 8002798:	f04f 0100 	mov.w	r1, #0
 800279c:	0159      	lsls	r1, r3, #5
 800279e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027a2:	0150      	lsls	r0, r2, #5
 80027a4:	4602      	mov	r2, r0
 80027a6:	460b      	mov	r3, r1
 80027a8:	4641      	mov	r1, r8
 80027aa:	ebb2 0a01 	subs.w	sl, r2, r1
 80027ae:	4649      	mov	r1, r9
 80027b0:	eb63 0b01 	sbc.w	fp, r3, r1
 80027b4:	f04f 0200 	mov.w	r2, #0
 80027b8:	f04f 0300 	mov.w	r3, #0
 80027bc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80027c0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80027c4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80027c8:	ebb2 040a 	subs.w	r4, r2, sl
 80027cc:	eb63 050b 	sbc.w	r5, r3, fp
 80027d0:	f04f 0200 	mov.w	r2, #0
 80027d4:	f04f 0300 	mov.w	r3, #0
 80027d8:	00eb      	lsls	r3, r5, #3
 80027da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80027de:	00e2      	lsls	r2, r4, #3
 80027e0:	4614      	mov	r4, r2
 80027e2:	461d      	mov	r5, r3
 80027e4:	4643      	mov	r3, r8
 80027e6:	18e3      	adds	r3, r4, r3
 80027e8:	603b      	str	r3, [r7, #0]
 80027ea:	464b      	mov	r3, r9
 80027ec:	eb45 0303 	adc.w	r3, r5, r3
 80027f0:	607b      	str	r3, [r7, #4]
 80027f2:	f04f 0200 	mov.w	r2, #0
 80027f6:	f04f 0300 	mov.w	r3, #0
 80027fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80027fe:	4629      	mov	r1, r5
 8002800:	028b      	lsls	r3, r1, #10
 8002802:	4621      	mov	r1, r4
 8002804:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002808:	4621      	mov	r1, r4
 800280a:	028a      	lsls	r2, r1, #10
 800280c:	4610      	mov	r0, r2
 800280e:	4619      	mov	r1, r3
 8002810:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002812:	2200      	movs	r2, #0
 8002814:	61bb      	str	r3, [r7, #24]
 8002816:	61fa      	str	r2, [r7, #28]
 8002818:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800281c:	f7fd fd86 	bl	800032c <__aeabi_uldivmod>
 8002820:	4602      	mov	r2, r0
 8002822:	460b      	mov	r3, r1
 8002824:	4613      	mov	r3, r2
 8002826:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002828:	4b0b      	ldr	r3, [pc, #44]	; (8002858 <HAL_RCC_GetSysClockFreq+0x200>)
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	0c1b      	lsrs	r3, r3, #16
 800282e:	f003 0303 	and.w	r3, r3, #3
 8002832:	3301      	adds	r3, #1
 8002834:	005b      	lsls	r3, r3, #1
 8002836:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002838:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800283a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800283c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002840:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002842:	e002      	b.n	800284a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002844:	4b05      	ldr	r3, [pc, #20]	; (800285c <HAL_RCC_GetSysClockFreq+0x204>)
 8002846:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002848:	bf00      	nop
    }
  }
  return sysclockfreq;
 800284a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800284c:	4618      	mov	r0, r3
 800284e:	3750      	adds	r7, #80	; 0x50
 8002850:	46bd      	mov	sp, r7
 8002852:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002856:	bf00      	nop
 8002858:	40023800 	.word	0x40023800
 800285c:	00f42400 	.word	0x00f42400
 8002860:	007a1200 	.word	0x007a1200

08002864 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002864:	b480      	push	{r7}
 8002866:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002868:	4b03      	ldr	r3, [pc, #12]	; (8002878 <HAL_RCC_GetHCLKFreq+0x14>)
 800286a:	681b      	ldr	r3, [r3, #0]
}
 800286c:	4618      	mov	r0, r3
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr
 8002876:	bf00      	nop
 8002878:	20000000 	.word	0x20000000

0800287c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002880:	f7ff fff0 	bl	8002864 <HAL_RCC_GetHCLKFreq>
 8002884:	4602      	mov	r2, r0
 8002886:	4b05      	ldr	r3, [pc, #20]	; (800289c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	0a9b      	lsrs	r3, r3, #10
 800288c:	f003 0307 	and.w	r3, r3, #7
 8002890:	4903      	ldr	r1, [pc, #12]	; (80028a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002892:	5ccb      	ldrb	r3, [r1, r3]
 8002894:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002898:	4618      	mov	r0, r3
 800289a:	bd80      	pop	{r7, pc}
 800289c:	40023800 	.word	0x40023800
 80028a0:	08003558 	.word	0x08003558

080028a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80028a8:	f7ff ffdc 	bl	8002864 <HAL_RCC_GetHCLKFreq>
 80028ac:	4602      	mov	r2, r0
 80028ae:	4b05      	ldr	r3, [pc, #20]	; (80028c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	0b5b      	lsrs	r3, r3, #13
 80028b4:	f003 0307 	and.w	r3, r3, #7
 80028b8:	4903      	ldr	r1, [pc, #12]	; (80028c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028ba:	5ccb      	ldrb	r3, [r1, r3]
 80028bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	40023800 	.word	0x40023800
 80028c8:	08003558 	.word	0x08003558

080028cc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d101      	bne.n	80028de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e03f      	b.n	800295e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d106      	bne.n	80028f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2200      	movs	r2, #0
 80028ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f7fe fad8 	bl	8000ea8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2224      	movs	r2, #36	; 0x24
 80028fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	68da      	ldr	r2, [r3, #12]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800290e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	f000 f829 	bl	8002968 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	691a      	ldr	r2, [r3, #16]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002924:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	695a      	ldr	r2, [r3, #20]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002934:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	68da      	ldr	r2, [r3, #12]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002944:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2200      	movs	r2, #0
 800294a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2220      	movs	r2, #32
 8002950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2220      	movs	r2, #32
 8002958:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800295c:	2300      	movs	r3, #0
}
 800295e:	4618      	mov	r0, r3
 8002960:	3708      	adds	r7, #8
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
	...

08002968 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002968:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800296c:	b0c0      	sub	sp, #256	; 0x100
 800296e:	af00      	add	r7, sp, #0
 8002970:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002974:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	691b      	ldr	r3, [r3, #16]
 800297c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002980:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002984:	68d9      	ldr	r1, [r3, #12]
 8002986:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	ea40 0301 	orr.w	r3, r0, r1
 8002990:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002992:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002996:	689a      	ldr	r2, [r3, #8]
 8002998:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800299c:	691b      	ldr	r3, [r3, #16]
 800299e:	431a      	orrs	r2, r3
 80029a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029a4:	695b      	ldr	r3, [r3, #20]
 80029a6:	431a      	orrs	r2, r3
 80029a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029ac:	69db      	ldr	r3, [r3, #28]
 80029ae:	4313      	orrs	r3, r2
 80029b0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80029b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80029c0:	f021 010c 	bic.w	r1, r1, #12
 80029c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80029ce:	430b      	orrs	r3, r1
 80029d0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80029d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	695b      	ldr	r3, [r3, #20]
 80029da:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80029de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029e2:	6999      	ldr	r1, [r3, #24]
 80029e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	ea40 0301 	orr.w	r3, r0, r1
 80029ee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80029f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	4b8f      	ldr	r3, [pc, #572]	; (8002c34 <UART_SetConfig+0x2cc>)
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d005      	beq.n	8002a08 <UART_SetConfig+0xa0>
 80029fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	4b8d      	ldr	r3, [pc, #564]	; (8002c38 <UART_SetConfig+0x2d0>)
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d104      	bne.n	8002a12 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002a08:	f7ff ff4c 	bl	80028a4 <HAL_RCC_GetPCLK2Freq>
 8002a0c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002a10:	e003      	b.n	8002a1a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002a12:	f7ff ff33 	bl	800287c <HAL_RCC_GetPCLK1Freq>
 8002a16:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a1e:	69db      	ldr	r3, [r3, #28]
 8002a20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a24:	f040 810c 	bne.w	8002c40 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002a28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002a32:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002a36:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002a3a:	4622      	mov	r2, r4
 8002a3c:	462b      	mov	r3, r5
 8002a3e:	1891      	adds	r1, r2, r2
 8002a40:	65b9      	str	r1, [r7, #88]	; 0x58
 8002a42:	415b      	adcs	r3, r3
 8002a44:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002a46:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002a4a:	4621      	mov	r1, r4
 8002a4c:	eb12 0801 	adds.w	r8, r2, r1
 8002a50:	4629      	mov	r1, r5
 8002a52:	eb43 0901 	adc.w	r9, r3, r1
 8002a56:	f04f 0200 	mov.w	r2, #0
 8002a5a:	f04f 0300 	mov.w	r3, #0
 8002a5e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a62:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a66:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a6a:	4690      	mov	r8, r2
 8002a6c:	4699      	mov	r9, r3
 8002a6e:	4623      	mov	r3, r4
 8002a70:	eb18 0303 	adds.w	r3, r8, r3
 8002a74:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002a78:	462b      	mov	r3, r5
 8002a7a:	eb49 0303 	adc.w	r3, r9, r3
 8002a7e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002a82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002a8e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002a92:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002a96:	460b      	mov	r3, r1
 8002a98:	18db      	adds	r3, r3, r3
 8002a9a:	653b      	str	r3, [r7, #80]	; 0x50
 8002a9c:	4613      	mov	r3, r2
 8002a9e:	eb42 0303 	adc.w	r3, r2, r3
 8002aa2:	657b      	str	r3, [r7, #84]	; 0x54
 8002aa4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002aa8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002aac:	f7fd fc3e 	bl	800032c <__aeabi_uldivmod>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	460b      	mov	r3, r1
 8002ab4:	4b61      	ldr	r3, [pc, #388]	; (8002c3c <UART_SetConfig+0x2d4>)
 8002ab6:	fba3 2302 	umull	r2, r3, r3, r2
 8002aba:	095b      	lsrs	r3, r3, #5
 8002abc:	011c      	lsls	r4, r3, #4
 8002abe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002ac8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002acc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002ad0:	4642      	mov	r2, r8
 8002ad2:	464b      	mov	r3, r9
 8002ad4:	1891      	adds	r1, r2, r2
 8002ad6:	64b9      	str	r1, [r7, #72]	; 0x48
 8002ad8:	415b      	adcs	r3, r3
 8002ada:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002adc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002ae0:	4641      	mov	r1, r8
 8002ae2:	eb12 0a01 	adds.w	sl, r2, r1
 8002ae6:	4649      	mov	r1, r9
 8002ae8:	eb43 0b01 	adc.w	fp, r3, r1
 8002aec:	f04f 0200 	mov.w	r2, #0
 8002af0:	f04f 0300 	mov.w	r3, #0
 8002af4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002af8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002afc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002b00:	4692      	mov	sl, r2
 8002b02:	469b      	mov	fp, r3
 8002b04:	4643      	mov	r3, r8
 8002b06:	eb1a 0303 	adds.w	r3, sl, r3
 8002b0a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002b0e:	464b      	mov	r3, r9
 8002b10:	eb4b 0303 	adc.w	r3, fp, r3
 8002b14:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002b18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002b24:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002b28:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002b2c:	460b      	mov	r3, r1
 8002b2e:	18db      	adds	r3, r3, r3
 8002b30:	643b      	str	r3, [r7, #64]	; 0x40
 8002b32:	4613      	mov	r3, r2
 8002b34:	eb42 0303 	adc.w	r3, r2, r3
 8002b38:	647b      	str	r3, [r7, #68]	; 0x44
 8002b3a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002b3e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002b42:	f7fd fbf3 	bl	800032c <__aeabi_uldivmod>
 8002b46:	4602      	mov	r2, r0
 8002b48:	460b      	mov	r3, r1
 8002b4a:	4611      	mov	r1, r2
 8002b4c:	4b3b      	ldr	r3, [pc, #236]	; (8002c3c <UART_SetConfig+0x2d4>)
 8002b4e:	fba3 2301 	umull	r2, r3, r3, r1
 8002b52:	095b      	lsrs	r3, r3, #5
 8002b54:	2264      	movs	r2, #100	; 0x64
 8002b56:	fb02 f303 	mul.w	r3, r2, r3
 8002b5a:	1acb      	subs	r3, r1, r3
 8002b5c:	00db      	lsls	r3, r3, #3
 8002b5e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002b62:	4b36      	ldr	r3, [pc, #216]	; (8002c3c <UART_SetConfig+0x2d4>)
 8002b64:	fba3 2302 	umull	r2, r3, r3, r2
 8002b68:	095b      	lsrs	r3, r3, #5
 8002b6a:	005b      	lsls	r3, r3, #1
 8002b6c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002b70:	441c      	add	r4, r3
 8002b72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b76:	2200      	movs	r2, #0
 8002b78:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002b7c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002b80:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002b84:	4642      	mov	r2, r8
 8002b86:	464b      	mov	r3, r9
 8002b88:	1891      	adds	r1, r2, r2
 8002b8a:	63b9      	str	r1, [r7, #56]	; 0x38
 8002b8c:	415b      	adcs	r3, r3
 8002b8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b90:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002b94:	4641      	mov	r1, r8
 8002b96:	1851      	adds	r1, r2, r1
 8002b98:	6339      	str	r1, [r7, #48]	; 0x30
 8002b9a:	4649      	mov	r1, r9
 8002b9c:	414b      	adcs	r3, r1
 8002b9e:	637b      	str	r3, [r7, #52]	; 0x34
 8002ba0:	f04f 0200 	mov.w	r2, #0
 8002ba4:	f04f 0300 	mov.w	r3, #0
 8002ba8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002bac:	4659      	mov	r1, fp
 8002bae:	00cb      	lsls	r3, r1, #3
 8002bb0:	4651      	mov	r1, sl
 8002bb2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002bb6:	4651      	mov	r1, sl
 8002bb8:	00ca      	lsls	r2, r1, #3
 8002bba:	4610      	mov	r0, r2
 8002bbc:	4619      	mov	r1, r3
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	4642      	mov	r2, r8
 8002bc2:	189b      	adds	r3, r3, r2
 8002bc4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002bc8:	464b      	mov	r3, r9
 8002bca:	460a      	mov	r2, r1
 8002bcc:	eb42 0303 	adc.w	r3, r2, r3
 8002bd0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002bd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002be0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002be4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002be8:	460b      	mov	r3, r1
 8002bea:	18db      	adds	r3, r3, r3
 8002bec:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bee:	4613      	mov	r3, r2
 8002bf0:	eb42 0303 	adc.w	r3, r2, r3
 8002bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bf6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002bfa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002bfe:	f7fd fb95 	bl	800032c <__aeabi_uldivmod>
 8002c02:	4602      	mov	r2, r0
 8002c04:	460b      	mov	r3, r1
 8002c06:	4b0d      	ldr	r3, [pc, #52]	; (8002c3c <UART_SetConfig+0x2d4>)
 8002c08:	fba3 1302 	umull	r1, r3, r3, r2
 8002c0c:	095b      	lsrs	r3, r3, #5
 8002c0e:	2164      	movs	r1, #100	; 0x64
 8002c10:	fb01 f303 	mul.w	r3, r1, r3
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	00db      	lsls	r3, r3, #3
 8002c18:	3332      	adds	r3, #50	; 0x32
 8002c1a:	4a08      	ldr	r2, [pc, #32]	; (8002c3c <UART_SetConfig+0x2d4>)
 8002c1c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c20:	095b      	lsrs	r3, r3, #5
 8002c22:	f003 0207 	and.w	r2, r3, #7
 8002c26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4422      	add	r2, r4
 8002c2e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002c30:	e105      	b.n	8002e3e <UART_SetConfig+0x4d6>
 8002c32:	bf00      	nop
 8002c34:	40011000 	.word	0x40011000
 8002c38:	40011400 	.word	0x40011400
 8002c3c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002c40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c44:	2200      	movs	r2, #0
 8002c46:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002c4a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002c4e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002c52:	4642      	mov	r2, r8
 8002c54:	464b      	mov	r3, r9
 8002c56:	1891      	adds	r1, r2, r2
 8002c58:	6239      	str	r1, [r7, #32]
 8002c5a:	415b      	adcs	r3, r3
 8002c5c:	627b      	str	r3, [r7, #36]	; 0x24
 8002c5e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002c62:	4641      	mov	r1, r8
 8002c64:	1854      	adds	r4, r2, r1
 8002c66:	4649      	mov	r1, r9
 8002c68:	eb43 0501 	adc.w	r5, r3, r1
 8002c6c:	f04f 0200 	mov.w	r2, #0
 8002c70:	f04f 0300 	mov.w	r3, #0
 8002c74:	00eb      	lsls	r3, r5, #3
 8002c76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c7a:	00e2      	lsls	r2, r4, #3
 8002c7c:	4614      	mov	r4, r2
 8002c7e:	461d      	mov	r5, r3
 8002c80:	4643      	mov	r3, r8
 8002c82:	18e3      	adds	r3, r4, r3
 8002c84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002c88:	464b      	mov	r3, r9
 8002c8a:	eb45 0303 	adc.w	r3, r5, r3
 8002c8e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002c92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002c9e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002ca2:	f04f 0200 	mov.w	r2, #0
 8002ca6:	f04f 0300 	mov.w	r3, #0
 8002caa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002cae:	4629      	mov	r1, r5
 8002cb0:	008b      	lsls	r3, r1, #2
 8002cb2:	4621      	mov	r1, r4
 8002cb4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002cb8:	4621      	mov	r1, r4
 8002cba:	008a      	lsls	r2, r1, #2
 8002cbc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002cc0:	f7fd fb34 	bl	800032c <__aeabi_uldivmod>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	460b      	mov	r3, r1
 8002cc8:	4b60      	ldr	r3, [pc, #384]	; (8002e4c <UART_SetConfig+0x4e4>)
 8002cca:	fba3 2302 	umull	r2, r3, r3, r2
 8002cce:	095b      	lsrs	r3, r3, #5
 8002cd0:	011c      	lsls	r4, r3, #4
 8002cd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002cdc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002ce0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002ce4:	4642      	mov	r2, r8
 8002ce6:	464b      	mov	r3, r9
 8002ce8:	1891      	adds	r1, r2, r2
 8002cea:	61b9      	str	r1, [r7, #24]
 8002cec:	415b      	adcs	r3, r3
 8002cee:	61fb      	str	r3, [r7, #28]
 8002cf0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002cf4:	4641      	mov	r1, r8
 8002cf6:	1851      	adds	r1, r2, r1
 8002cf8:	6139      	str	r1, [r7, #16]
 8002cfa:	4649      	mov	r1, r9
 8002cfc:	414b      	adcs	r3, r1
 8002cfe:	617b      	str	r3, [r7, #20]
 8002d00:	f04f 0200 	mov.w	r2, #0
 8002d04:	f04f 0300 	mov.w	r3, #0
 8002d08:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002d0c:	4659      	mov	r1, fp
 8002d0e:	00cb      	lsls	r3, r1, #3
 8002d10:	4651      	mov	r1, sl
 8002d12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d16:	4651      	mov	r1, sl
 8002d18:	00ca      	lsls	r2, r1, #3
 8002d1a:	4610      	mov	r0, r2
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	4603      	mov	r3, r0
 8002d20:	4642      	mov	r2, r8
 8002d22:	189b      	adds	r3, r3, r2
 8002d24:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002d28:	464b      	mov	r3, r9
 8002d2a:	460a      	mov	r2, r1
 8002d2c:	eb42 0303 	adc.w	r3, r2, r3
 8002d30:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002d34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	67bb      	str	r3, [r7, #120]	; 0x78
 8002d3e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002d40:	f04f 0200 	mov.w	r2, #0
 8002d44:	f04f 0300 	mov.w	r3, #0
 8002d48:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002d4c:	4649      	mov	r1, r9
 8002d4e:	008b      	lsls	r3, r1, #2
 8002d50:	4641      	mov	r1, r8
 8002d52:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d56:	4641      	mov	r1, r8
 8002d58:	008a      	lsls	r2, r1, #2
 8002d5a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002d5e:	f7fd fae5 	bl	800032c <__aeabi_uldivmod>
 8002d62:	4602      	mov	r2, r0
 8002d64:	460b      	mov	r3, r1
 8002d66:	4b39      	ldr	r3, [pc, #228]	; (8002e4c <UART_SetConfig+0x4e4>)
 8002d68:	fba3 1302 	umull	r1, r3, r3, r2
 8002d6c:	095b      	lsrs	r3, r3, #5
 8002d6e:	2164      	movs	r1, #100	; 0x64
 8002d70:	fb01 f303 	mul.w	r3, r1, r3
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	011b      	lsls	r3, r3, #4
 8002d78:	3332      	adds	r3, #50	; 0x32
 8002d7a:	4a34      	ldr	r2, [pc, #208]	; (8002e4c <UART_SetConfig+0x4e4>)
 8002d7c:	fba2 2303 	umull	r2, r3, r2, r3
 8002d80:	095b      	lsrs	r3, r3, #5
 8002d82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d86:	441c      	add	r4, r3
 8002d88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	673b      	str	r3, [r7, #112]	; 0x70
 8002d90:	677a      	str	r2, [r7, #116]	; 0x74
 8002d92:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002d96:	4642      	mov	r2, r8
 8002d98:	464b      	mov	r3, r9
 8002d9a:	1891      	adds	r1, r2, r2
 8002d9c:	60b9      	str	r1, [r7, #8]
 8002d9e:	415b      	adcs	r3, r3
 8002da0:	60fb      	str	r3, [r7, #12]
 8002da2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002da6:	4641      	mov	r1, r8
 8002da8:	1851      	adds	r1, r2, r1
 8002daa:	6039      	str	r1, [r7, #0]
 8002dac:	4649      	mov	r1, r9
 8002dae:	414b      	adcs	r3, r1
 8002db0:	607b      	str	r3, [r7, #4]
 8002db2:	f04f 0200 	mov.w	r2, #0
 8002db6:	f04f 0300 	mov.w	r3, #0
 8002dba:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002dbe:	4659      	mov	r1, fp
 8002dc0:	00cb      	lsls	r3, r1, #3
 8002dc2:	4651      	mov	r1, sl
 8002dc4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002dc8:	4651      	mov	r1, sl
 8002dca:	00ca      	lsls	r2, r1, #3
 8002dcc:	4610      	mov	r0, r2
 8002dce:	4619      	mov	r1, r3
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	4642      	mov	r2, r8
 8002dd4:	189b      	adds	r3, r3, r2
 8002dd6:	66bb      	str	r3, [r7, #104]	; 0x68
 8002dd8:	464b      	mov	r3, r9
 8002dda:	460a      	mov	r2, r1
 8002ddc:	eb42 0303 	adc.w	r3, r2, r3
 8002de0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002de2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	2200      	movs	r2, #0
 8002dea:	663b      	str	r3, [r7, #96]	; 0x60
 8002dec:	667a      	str	r2, [r7, #100]	; 0x64
 8002dee:	f04f 0200 	mov.w	r2, #0
 8002df2:	f04f 0300 	mov.w	r3, #0
 8002df6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002dfa:	4649      	mov	r1, r9
 8002dfc:	008b      	lsls	r3, r1, #2
 8002dfe:	4641      	mov	r1, r8
 8002e00:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e04:	4641      	mov	r1, r8
 8002e06:	008a      	lsls	r2, r1, #2
 8002e08:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002e0c:	f7fd fa8e 	bl	800032c <__aeabi_uldivmod>
 8002e10:	4602      	mov	r2, r0
 8002e12:	460b      	mov	r3, r1
 8002e14:	4b0d      	ldr	r3, [pc, #52]	; (8002e4c <UART_SetConfig+0x4e4>)
 8002e16:	fba3 1302 	umull	r1, r3, r3, r2
 8002e1a:	095b      	lsrs	r3, r3, #5
 8002e1c:	2164      	movs	r1, #100	; 0x64
 8002e1e:	fb01 f303 	mul.w	r3, r1, r3
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	011b      	lsls	r3, r3, #4
 8002e26:	3332      	adds	r3, #50	; 0x32
 8002e28:	4a08      	ldr	r2, [pc, #32]	; (8002e4c <UART_SetConfig+0x4e4>)
 8002e2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e2e:	095b      	lsrs	r3, r3, #5
 8002e30:	f003 020f 	and.w	r2, r3, #15
 8002e34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4422      	add	r2, r4
 8002e3c:	609a      	str	r2, [r3, #8]
}
 8002e3e:	bf00      	nop
 8002e40:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002e44:	46bd      	mov	sp, r7
 8002e46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e4a:	bf00      	nop
 8002e4c:	51eb851f 	.word	0x51eb851f

08002e50 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002e50:	b084      	sub	sp, #16
 8002e52:	b580      	push	{r7, lr}
 8002e54:	b084      	sub	sp, #16
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	6078      	str	r0, [r7, #4]
 8002e5a:	f107 001c 	add.w	r0, r7, #28
 8002e5e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d122      	bne.n	8002eae <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e6c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002e7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002e90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d105      	bne.n	8002ea2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	68db      	ldr	r3, [r3, #12]
 8002e9a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f000 faa2 	bl	80033ec <USB_CoreReset>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	73fb      	strb	r3, [r7, #15]
 8002eac:	e01a      	b.n	8002ee4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	68db      	ldr	r3, [r3, #12]
 8002eb2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	f000 fa96 	bl	80033ec <USB_CoreReset>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002ec4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d106      	bne.n	8002ed8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ece:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	639a      	str	r2, [r3, #56]	; 0x38
 8002ed6:	e005      	b.n	8002ee4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002edc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d10b      	bne.n	8002f02 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	f043 0206 	orr.w	r2, r3, #6
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	f043 0220 	orr.w	r2, r3, #32
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002f02:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	3710      	adds	r7, #16
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002f0e:	b004      	add	sp, #16
 8002f10:	4770      	bx	lr

08002f12 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002f12:	b480      	push	{r7}
 8002f14:	b083      	sub	sp, #12
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	f023 0201 	bic.w	r2, r3, #1
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002f26:	2300      	movs	r3, #0
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	370c      	adds	r7, #12
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f32:	4770      	bx	lr

08002f34 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b084      	sub	sp, #16
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
 8002f3c:	460b      	mov	r3, r1
 8002f3e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8002f40:	2300      	movs	r3, #0
 8002f42:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002f50:	78fb      	ldrb	r3, [r7, #3]
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d115      	bne.n	8002f82 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	68db      	ldr	r3, [r3, #12]
 8002f5a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002f62:	2001      	movs	r0, #1
 8002f64:	f7fe f91a 	bl	800119c <HAL_Delay>
      ms++;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	3301      	adds	r3, #1
 8002f6c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f000 fa2e 	bl	80033d0 <USB_GetMode>
 8002f74:	4603      	mov	r3, r0
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d01e      	beq.n	8002fb8 <USB_SetCurrentMode+0x84>
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2b31      	cmp	r3, #49	; 0x31
 8002f7e:	d9f0      	bls.n	8002f62 <USB_SetCurrentMode+0x2e>
 8002f80:	e01a      	b.n	8002fb8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8002f82:	78fb      	ldrb	r3, [r7, #3]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d115      	bne.n	8002fb4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002f94:	2001      	movs	r0, #1
 8002f96:	f7fe f901 	bl	800119c <HAL_Delay>
      ms++;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	3301      	adds	r3, #1
 8002f9e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8002fa0:	6878      	ldr	r0, [r7, #4]
 8002fa2:	f000 fa15 	bl	80033d0 <USB_GetMode>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d005      	beq.n	8002fb8 <USB_SetCurrentMode+0x84>
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2b31      	cmp	r3, #49	; 0x31
 8002fb0:	d9f0      	bls.n	8002f94 <USB_SetCurrentMode+0x60>
 8002fb2:	e001      	b.n	8002fb8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e005      	b.n	8002fc4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2b32      	cmp	r3, #50	; 0x32
 8002fbc:	d101      	bne.n	8002fc2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e000      	b.n	8002fc4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8002fc2:	2300      	movs	r3, #0
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3710      	adds	r7, #16
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}

08002fcc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002fcc:	b084      	sub	sp, #16
 8002fce:	b580      	push	{r7, lr}
 8002fd0:	b086      	sub	sp, #24
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	6078      	str	r0, [r7, #4]
 8002fd6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002fda:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	613b      	str	r3, [r7, #16]
 8002fea:	e009      	b.n	8003000 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8002fec:	687a      	ldr	r2, [r7, #4]
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	3340      	adds	r3, #64	; 0x40
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	4413      	add	r3, r2
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	3301      	adds	r3, #1
 8002ffe:	613b      	str	r3, [r7, #16]
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	2b0e      	cmp	r3, #14
 8003004:	d9f2      	bls.n	8002fec <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003006:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003008:	2b00      	cmp	r3, #0
 800300a:	d11c      	bne.n	8003046 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	68fa      	ldr	r2, [r7, #12]
 8003016:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800301a:	f043 0302 	orr.w	r3, r3, #2
 800301e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003024:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003030:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800303c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	639a      	str	r2, [r3, #56]	; 0x38
 8003044:	e00b      	b.n	800305e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800304a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003056:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003064:	461a      	mov	r2, r3
 8003066:	2300      	movs	r3, #0
 8003068:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003070:	4619      	mov	r1, r3
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003078:	461a      	mov	r2, r3
 800307a:	680b      	ldr	r3, [r1, #0]
 800307c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800307e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003080:	2b01      	cmp	r3, #1
 8003082:	d10c      	bne.n	800309e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003086:	2b00      	cmp	r3, #0
 8003088:	d104      	bne.n	8003094 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800308a:	2100      	movs	r1, #0
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f000 f965 	bl	800335c <USB_SetDevSpeed>
 8003092:	e008      	b.n	80030a6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003094:	2101      	movs	r1, #1
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f000 f960 	bl	800335c <USB_SetDevSpeed>
 800309c:	e003      	b.n	80030a6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800309e:	2103      	movs	r1, #3
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	f000 f95b 	bl	800335c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80030a6:	2110      	movs	r1, #16
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	f000 f8f3 	bl	8003294 <USB_FlushTxFifo>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d001      	beq.n	80030b8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	f000 f91f 	bl	80032fc <USB_FlushRxFifo>
 80030be:	4603      	mov	r3, r0
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d001      	beq.n	80030c8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030ce:	461a      	mov	r2, r3
 80030d0:	2300      	movs	r3, #0
 80030d2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030da:	461a      	mov	r2, r3
 80030dc:	2300      	movs	r3, #0
 80030de:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030e6:	461a      	mov	r2, r3
 80030e8:	2300      	movs	r3, #0
 80030ea:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80030ec:	2300      	movs	r3, #0
 80030ee:	613b      	str	r3, [r7, #16]
 80030f0:	e043      	b.n	800317a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	015a      	lsls	r2, r3, #5
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	4413      	add	r3, r2
 80030fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003104:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003108:	d118      	bne.n	800313c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d10a      	bne.n	8003126 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	015a      	lsls	r2, r3, #5
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	4413      	add	r3, r2
 8003118:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800311c:	461a      	mov	r2, r3
 800311e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003122:	6013      	str	r3, [r2, #0]
 8003124:	e013      	b.n	800314e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	015a      	lsls	r2, r3, #5
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	4413      	add	r3, r2
 800312e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003132:	461a      	mov	r2, r3
 8003134:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003138:	6013      	str	r3, [r2, #0]
 800313a:	e008      	b.n	800314e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	015a      	lsls	r2, r3, #5
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	4413      	add	r3, r2
 8003144:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003148:	461a      	mov	r2, r3
 800314a:	2300      	movs	r3, #0
 800314c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	015a      	lsls	r2, r3, #5
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	4413      	add	r3, r2
 8003156:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800315a:	461a      	mov	r2, r3
 800315c:	2300      	movs	r3, #0
 800315e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	015a      	lsls	r2, r3, #5
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	4413      	add	r3, r2
 8003168:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800316c:	461a      	mov	r2, r3
 800316e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003172:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	3301      	adds	r3, #1
 8003178:	613b      	str	r3, [r7, #16]
 800317a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800317c:	693a      	ldr	r2, [r7, #16]
 800317e:	429a      	cmp	r2, r3
 8003180:	d3b7      	bcc.n	80030f2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003182:	2300      	movs	r3, #0
 8003184:	613b      	str	r3, [r7, #16]
 8003186:	e043      	b.n	8003210 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	015a      	lsls	r2, r3, #5
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	4413      	add	r3, r2
 8003190:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800319a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800319e:	d118      	bne.n	80031d2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d10a      	bne.n	80031bc <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	015a      	lsls	r2, r3, #5
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	4413      	add	r3, r2
 80031ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031b2:	461a      	mov	r2, r3
 80031b4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80031b8:	6013      	str	r3, [r2, #0]
 80031ba:	e013      	b.n	80031e4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	015a      	lsls	r2, r3, #5
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	4413      	add	r3, r2
 80031c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031c8:	461a      	mov	r2, r3
 80031ca:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80031ce:	6013      	str	r3, [r2, #0]
 80031d0:	e008      	b.n	80031e4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	015a      	lsls	r2, r3, #5
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	4413      	add	r3, r2
 80031da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031de:	461a      	mov	r2, r3
 80031e0:	2300      	movs	r3, #0
 80031e2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	015a      	lsls	r2, r3, #5
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	4413      	add	r3, r2
 80031ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031f0:	461a      	mov	r2, r3
 80031f2:	2300      	movs	r3, #0
 80031f4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	015a      	lsls	r2, r3, #5
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	4413      	add	r3, r2
 80031fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003202:	461a      	mov	r2, r3
 8003204:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003208:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	3301      	adds	r3, #1
 800320e:	613b      	str	r3, [r7, #16]
 8003210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003212:	693a      	ldr	r2, [r7, #16]
 8003214:	429a      	cmp	r2, r3
 8003216:	d3b7      	bcc.n	8003188 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800321e:	691b      	ldr	r3, [r3, #16]
 8003220:	68fa      	ldr	r2, [r7, #12]
 8003222:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003226:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800322a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2200      	movs	r2, #0
 8003230:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003238:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800323a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800323c:	2b00      	cmp	r3, #0
 800323e:	d105      	bne.n	800324c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	699b      	ldr	r3, [r3, #24]
 8003244:	f043 0210 	orr.w	r2, r3, #16
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	699a      	ldr	r2, [r3, #24]
 8003250:	4b0f      	ldr	r3, [pc, #60]	; (8003290 <USB_DevInit+0x2c4>)
 8003252:	4313      	orrs	r3, r2
 8003254:	687a      	ldr	r2, [r7, #4]
 8003256:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003258:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800325a:	2b00      	cmp	r3, #0
 800325c:	d005      	beq.n	800326a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	699b      	ldr	r3, [r3, #24]
 8003262:	f043 0208 	orr.w	r2, r3, #8
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800326a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800326c:	2b01      	cmp	r3, #1
 800326e:	d107      	bne.n	8003280 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	699b      	ldr	r3, [r3, #24]
 8003274:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003278:	f043 0304 	orr.w	r3, r3, #4
 800327c:	687a      	ldr	r2, [r7, #4]
 800327e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003280:	7dfb      	ldrb	r3, [r7, #23]
}
 8003282:	4618      	mov	r0, r3
 8003284:	3718      	adds	r7, #24
 8003286:	46bd      	mov	sp, r7
 8003288:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800328c:	b004      	add	sp, #16
 800328e:	4770      	bx	lr
 8003290:	803c3800 	.word	0x803c3800

08003294 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003294:	b480      	push	{r7}
 8003296:	b085      	sub	sp, #20
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
 800329c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800329e:	2300      	movs	r3, #0
 80032a0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	3301      	adds	r3, #1
 80032a6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	4a13      	ldr	r2, [pc, #76]	; (80032f8 <USB_FlushTxFifo+0x64>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d901      	bls.n	80032b4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80032b0:	2303      	movs	r3, #3
 80032b2:	e01b      	b.n	80032ec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	691b      	ldr	r3, [r3, #16]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	daf2      	bge.n	80032a2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80032bc:	2300      	movs	r3, #0
 80032be:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	019b      	lsls	r3, r3, #6
 80032c4:	f043 0220 	orr.w	r2, r3, #32
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	3301      	adds	r3, #1
 80032d0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	4a08      	ldr	r2, [pc, #32]	; (80032f8 <USB_FlushTxFifo+0x64>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d901      	bls.n	80032de <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	e006      	b.n	80032ec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	691b      	ldr	r3, [r3, #16]
 80032e2:	f003 0320 	and.w	r3, r3, #32
 80032e6:	2b20      	cmp	r3, #32
 80032e8:	d0f0      	beq.n	80032cc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80032ea:	2300      	movs	r3, #0
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	3714      	adds	r7, #20
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr
 80032f8:	00030d40 	.word	0x00030d40

080032fc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b085      	sub	sp, #20
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003304:	2300      	movs	r3, #0
 8003306:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	3301      	adds	r3, #1
 800330c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	4a11      	ldr	r2, [pc, #68]	; (8003358 <USB_FlushRxFifo+0x5c>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d901      	bls.n	800331a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003316:	2303      	movs	r3, #3
 8003318:	e018      	b.n	800334c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	691b      	ldr	r3, [r3, #16]
 800331e:	2b00      	cmp	r3, #0
 8003320:	daf2      	bge.n	8003308 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003322:	2300      	movs	r3, #0
 8003324:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2210      	movs	r2, #16
 800332a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	3301      	adds	r3, #1
 8003330:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	4a08      	ldr	r2, [pc, #32]	; (8003358 <USB_FlushRxFifo+0x5c>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d901      	bls.n	800333e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800333a:	2303      	movs	r3, #3
 800333c:	e006      	b.n	800334c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	691b      	ldr	r3, [r3, #16]
 8003342:	f003 0310 	and.w	r3, r3, #16
 8003346:	2b10      	cmp	r3, #16
 8003348:	d0f0      	beq.n	800332c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800334a:	2300      	movs	r3, #0
}
 800334c:	4618      	mov	r0, r3
 800334e:	3714      	adds	r7, #20
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr
 8003358:	00030d40 	.word	0x00030d40

0800335c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800335c:	b480      	push	{r7}
 800335e:	b085      	sub	sp, #20
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
 8003364:	460b      	mov	r3, r1
 8003366:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	78fb      	ldrb	r3, [r7, #3]
 8003376:	68f9      	ldr	r1, [r7, #12]
 8003378:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800337c:	4313      	orrs	r3, r2
 800337e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003380:	2300      	movs	r3, #0
}
 8003382:	4618      	mov	r0, r3
 8003384:	3714      	adds	r7, #20
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr

0800338e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800338e:	b480      	push	{r7}
 8003390:	b085      	sub	sp, #20
 8003392:	af00      	add	r7, sp, #0
 8003394:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	68fa      	ldr	r2, [r7, #12]
 80033a4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80033a8:	f023 0303 	bic.w	r3, r3, #3
 80033ac:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	68fa      	ldr	r2, [r7, #12]
 80033b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80033bc:	f043 0302 	orr.w	r3, r3, #2
 80033c0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80033c2:	2300      	movs	r3, #0
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	3714      	adds	r7, #20
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr

080033d0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b083      	sub	sp, #12
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	695b      	ldr	r3, [r3, #20]
 80033dc:	f003 0301 	and.w	r3, r3, #1
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	370c      	adds	r7, #12
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr

080033ec <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b085      	sub	sp, #20
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80033f4:	2300      	movs	r3, #0
 80033f6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	3301      	adds	r3, #1
 80033fc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	4a13      	ldr	r2, [pc, #76]	; (8003450 <USB_CoreReset+0x64>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d901      	bls.n	800340a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003406:	2303      	movs	r3, #3
 8003408:	e01b      	b.n	8003442 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	691b      	ldr	r3, [r3, #16]
 800340e:	2b00      	cmp	r3, #0
 8003410:	daf2      	bge.n	80033f8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003412:	2300      	movs	r3, #0
 8003414:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	691b      	ldr	r3, [r3, #16]
 800341a:	f043 0201 	orr.w	r2, r3, #1
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	3301      	adds	r3, #1
 8003426:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	4a09      	ldr	r2, [pc, #36]	; (8003450 <USB_CoreReset+0x64>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d901      	bls.n	8003434 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003430:	2303      	movs	r3, #3
 8003432:	e006      	b.n	8003442 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	691b      	ldr	r3, [r3, #16]
 8003438:	f003 0301 	and.w	r3, r3, #1
 800343c:	2b01      	cmp	r3, #1
 800343e:	d0f0      	beq.n	8003422 <USB_CoreReset+0x36>

  return HAL_OK;
 8003440:	2300      	movs	r3, #0
}
 8003442:	4618      	mov	r0, r3
 8003444:	3714      	adds	r7, #20
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr
 800344e:	bf00      	nop
 8003450:	00030d40 	.word	0x00030d40

08003454 <__libc_init_array>:
 8003454:	b570      	push	{r4, r5, r6, lr}
 8003456:	4d0d      	ldr	r5, [pc, #52]	; (800348c <__libc_init_array+0x38>)
 8003458:	4c0d      	ldr	r4, [pc, #52]	; (8003490 <__libc_init_array+0x3c>)
 800345a:	1b64      	subs	r4, r4, r5
 800345c:	10a4      	asrs	r4, r4, #2
 800345e:	2600      	movs	r6, #0
 8003460:	42a6      	cmp	r6, r4
 8003462:	d109      	bne.n	8003478 <__libc_init_array+0x24>
 8003464:	4d0b      	ldr	r5, [pc, #44]	; (8003494 <__libc_init_array+0x40>)
 8003466:	4c0c      	ldr	r4, [pc, #48]	; (8003498 <__libc_init_array+0x44>)
 8003468:	f000 f820 	bl	80034ac <_init>
 800346c:	1b64      	subs	r4, r4, r5
 800346e:	10a4      	asrs	r4, r4, #2
 8003470:	2600      	movs	r6, #0
 8003472:	42a6      	cmp	r6, r4
 8003474:	d105      	bne.n	8003482 <__libc_init_array+0x2e>
 8003476:	bd70      	pop	{r4, r5, r6, pc}
 8003478:	f855 3b04 	ldr.w	r3, [r5], #4
 800347c:	4798      	blx	r3
 800347e:	3601      	adds	r6, #1
 8003480:	e7ee      	b.n	8003460 <__libc_init_array+0xc>
 8003482:	f855 3b04 	ldr.w	r3, [r5], #4
 8003486:	4798      	blx	r3
 8003488:	3601      	adds	r6, #1
 800348a:	e7f2      	b.n	8003472 <__libc_init_array+0x1e>
 800348c:	08003568 	.word	0x08003568
 8003490:	08003568 	.word	0x08003568
 8003494:	08003568 	.word	0x08003568
 8003498:	0800356c 	.word	0x0800356c

0800349c <memset>:
 800349c:	4402      	add	r2, r0
 800349e:	4603      	mov	r3, r0
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d100      	bne.n	80034a6 <memset+0xa>
 80034a4:	4770      	bx	lr
 80034a6:	f803 1b01 	strb.w	r1, [r3], #1
 80034aa:	e7f9      	b.n	80034a0 <memset+0x4>

080034ac <_init>:
 80034ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034ae:	bf00      	nop
 80034b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034b2:	bc08      	pop	{r3}
 80034b4:	469e      	mov	lr, r3
 80034b6:	4770      	bx	lr

080034b8 <_fini>:
 80034b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034ba:	bf00      	nop
 80034bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034be:	bc08      	pop	{r3}
 80034c0:	469e      	mov	lr, r3
 80034c2:	4770      	bx	lr
